{"version":3,"sources":["../../../../../src/.internal/charts/percent/PercentDefaultTheme.ts","../../../../../src/.internal/charts/percent/PercentChart.ts","../../../../../src/.internal/charts/percent/PercentSeries.ts","../../../../../src/.internal/charts/pie/PieChart.ts","../../../../../src/.internal/charts/pie/PieSeries.ts","../../../../../src/.internal/charts/funnel/FunnelSlice.ts","../../../../../src/.internal/charts/funnel/FunnelSeries.ts","../../../../../src/.internal/charts/funnel/PyramidSeries.ts","../../../../../src/.internal/charts/funnel/PictorialStackedSeries.ts","../../../../../src/.internal/charts/funnel/SlicedChart.ts"],"names":["PercentDefaultTheme","Theme","setupDefaultRules","super","ic","this","_root","interfaceColors","r","rule","bind","setAll","legendLabelText","legendValueText","colors","ColorSet","new","width","p100","height","radius","percent","startAngle","endAngle","alignLabels","states","create","opacity","position","isMeasured","x","y","toggleKey","tooltipText","strokeWidth","strokeOpacity","role","lineJoin","shiftRadius","scale","textType","text","paddingTop","paddingBottom","populateText","location","paddingLeft","paddingRight","startLocation","endLocation","orientation","sequencedInterpolation","interactive","expandDistance","centerY","p50","centerX","rotation","fillOpacity","valueIs","setColor","PercentChart","SerialChart","_afterNew","_defaultThemes","push","chartContainer","children","seriesContainer","bulletsContainer","_processSeries","series","moveValue","length","Object","defineProperty","classNames","concat","className","PercentSeries","Series","constructor","Container","addDisposer","_makeSlices","_makeLabels","_makeTicks","makeSlice","dataItem","slice","slicesContainer","slices","make","on","updateLegendMarker","_setDataItem","set","makeLabel","label","labelsContainer","labels","_shouldMakeBullet","get","makeTick","tick","ticksContainer","ticks","fields","_onDataClear","reset","patterns","_prepareChildren","_lLabels","_rLabels","_hLabels","_valuesDirty","sum","absSum","valueHigh","valueLow","Infinity","count","$array","_dataItems","valueWorking","Math","abs","value","percentTotal","setRaw","setPrivateRaw","show","duration","promises","_super","call","_sequencedShowHide","Promise","all","hide","_updateChildren","markDirtyText","isDirty","updateLegendValue","_arrange","_arrangeDown","_arrangeUp","_arrangeLeft","_arrangeRight","dataItems","_updateTick","_afterChanged","processDataItem","next","showDataItem","$type","easing","animation","animate","key","to","waitForStop","applyAnimate","hideDataItem","hiddenState","hideTooltip","disposeDataItem","removeValue","dispose","hoverDataItem","isHidden","hover","unhoverDataItem","unhover","legendDataItem","markerRectangle","visualSettings","setting","_getNextDown","sort","a","b","l","bounds","adjustedLocalBounds","labelTop","top","bottom","_getNextUp","maxHeight","labelBottom","labelLeft","left","right","maxWidth","labelRight","_updateSize","markDirty","_dataItem","_dispose","chart","PieChart","w","innerWidth","h","innerHeight","innerRadius","$math","wr","hr","innerBounds","Percent","mr","min","max","prevRadius","_maxRadius","$utils","dy","dx","each","_markDirtyKey","index","indexOf","seriesRadius","seriesInnerRadius","markDirtyKey","PieSeries","ListTemplate","Template","Slice","_new","themeTags","template","RadialLabel","Tick","events","labelsTemplate","markDirtyBounds","arc","currentAngle","getPrivate","currentArc","color","_setDefault","fillPattern","middleAngle","setPrivate","labelRadius","isHiding","labelAngle","cos","sin","pl","pr","points","_positionBullet","bullet","sprite","angle","FunnelSlice","Graphics","display","moveTo","_tlx","_tly","lineTo","_trx","_try","quadraticCurveTo","_cprx","_cpry","_brx","_bry","_blx","_bly","_cplx","_cply","getPoint","locationX","locationY","tw","bw","tlx","trx","mlx","_changed","_clear","ed","FunnelSeries","_makeLinks","_tag","Label","links","makeLink","link","onPrivate","markDirtySize","horizontalLayout","verticalLayout","_opposite","total","_total","_count","_fixLayout","_sizeDirty","_nextCoord","i","decorateSlice","isLast","getNextValue","nextValue","nextItem","maxSize","workingValue","bottomRatio","d","topWidth","bottomWidth","linkHeight","labelY","labelX","tickLocation","lcw","lch","pt","pb","p0","p1","p2","PyramidSeries","_nextSize","undefined","sliceHeight","sliceBottomWidth","pyramidHeight","pyramidWidth","linkWidth","center","sliceTopWidth","atan2","c","tan","PI","square","s","sqrt","labelCoord","sliceX","sliceY","linkX","linkY","PictorialStackedSeries","seriesMask","_updateScale","seriesGraphics","localBounds","mw","mh","NaN","svgPath","SlicedChart","layout"],"mappings":"4lBASM,MAAOA,UAA4BC,IAC9BC,oBACTC,MAAMD,oBAEN,MAAME,EAAKC,KAAKC,MAAMC,gBAChBC,EAAIH,KAAKI,KAAKC,KAAKL,MAQzBG,EAAE,iBAAiBG,OAAO,CACzBC,gBAAiB,aACjBC,gBAAiB,4CACjBC,OAAQC,IAASC,IAAIX,KAAKC,MAAO,CAAC,GAClCW,MAAOC,IACPC,OAAQD,MASTV,EAAE,YAAYG,OAAO,CACpBS,OAAQC,YAAQ,IAChBC,YAAa,GACbC,SAAU,MAGXf,EAAE,aAAaG,OAAO,CACrBa,aAAa,EACbF,YAAa,GACbC,SAAU,MAGXf,EAAE,aAAaiB,OAAOC,OAAO,SAAU,CAAEH,UAAW,GAAII,QAAS,IAEjEnB,EAAE,QAAS,CAAC,QAAQG,OAAO,CAC1BiB,SAAU,WACVC,YAAY,EACZC,EAAG,EACHC,EAAG,EACHC,UAAW,SACXC,YAAa,wDACbC,YAAa,EACbC,cAAe,EACfC,KAAM,SACNC,SAAS,UAGV7B,EAAE,QAAS,CAAC,QAAQiB,OAAOC,OAAO,SAAU,CAAEY,YAAa,GAAIC,MAAO,IACtE/B,EAAE,QAAS,CAAC,QAAQiB,OAAOC,OAAO,cAAe,CAAEa,MAAO,OAC1D/B,EAAE,QAAS,CAAC,QAAQiB,OAAOC,OAAO,QAAS,CAAEa,MAAO,OAEpD/B,EAAE,cAAe,CAAC,QAAQG,OAAO,CAChC6B,SAAU,UACVpB,OAAQ,GACRqB,KAAM,wDACNC,WAAY,EACZC,cAAe,EACfC,cAAc,IAGfpC,EAAE,OAAQ,CAAC,QAAQG,OAAO,CACzBkC,SAAU,IAUXrC,EAAE,eAAeG,OAAO,CACvBmC,YAAa,GACbC,aAAc,GACdL,WAAY,GACZC,cAAe,KAShBnC,EAAE,gBAAgBG,OAAO,CACxBqC,cAAe,EACfC,YAAa,EACbC,YAAa,WACb1B,aAAa,EACb2B,wBAAwB,IAGzB3C,EAAE,eAAeG,OAAO,CACvByC,aAAa,EACbC,eAAgB,IAIjB7C,EAAE,eAAeiB,OAAOC,OAAO,QAAS,CAAE2B,eAAgB,MAE1D7C,EAAE,QAAS,CAAC,WAAWG,OAAO,CAC7BiC,cAAc,EACdH,KAAM,wDACNa,QAASC,MAGV/C,EAAE,QAAS,CAAC,SAAU,eAAeG,OAAO,CAC3C6C,QAAS,EACTF,QAASC,IACTE,UAAW,KAIZjD,EAAE,QAAS,CAAC,SAAU,aAAaG,OAAO,CACzC2C,QAASC,IACTC,QAAS,IAGVhD,EAAE,OAAQ,CAAC,WAAWG,OAAO,CAC5BkC,SAAU,IAGXrC,EAAE,cAAe,CAAC,SAAU,SAASG,OAAO,CAC3C+C,YAAa,GACbvB,cAAe,EACfkB,gBAAiB,KAGlB7C,EAAE,cAAe,CAAC,SAAU,OAAQ,aAAaG,OAAO,CACvDQ,OAAQ,KAGTX,EAAE,cAAe,CAAC,SAAU,OAAQ,eAAeG,OAAO,CACzDM,MAAO,KAURT,EAAE,iBAAiBG,OAAO,CACzBgD,QAAS,SAGVnD,EAAE,cAAe,CAAC,UAAW,SAASG,OAAO,CAC5C+C,YAAa,KAGdlD,EAAE,cAAe,CAAC,UAAW,OAAQ,aAAaG,OAAO,CACxDQ,OAAQ,IAGTX,EAAE,cAAe,CAAC,UAAW,OAAQ,eAAeG,OAAO,CAC1DM,MAAO,IAGRT,EAAE,cAAe,CAAC,YAAYG,OAAO,CACpCyC,aAAa,EACbC,eAAgB,IAGjB7C,EAAE,cAAe,CAAC,YAAYiB,OAAOC,OAAO,QAAS,CAAE2B,eAAgB,MAEvE7C,EAAE,QAAS,CAAC,YAAYG,OAAO,CAC9BiC,cAAc,EACdH,KAAM,wDACNa,QAASC,MAGV/C,EAAE,QAAS,CAAC,UAAW,eAAeG,OAAO,CAC5C6C,QAAS,EACTF,QAASC,IACTE,UAAW,KAGZjD,EAAE,QAAS,CAAC,UAAW,aAAaG,OAAO,CAC1C2C,QAASC,IACTC,QAAS,IAGVhD,EAAE,OAAQ,CAAC,YAAYG,OAAO,CAC7BkC,SAAU,IAWXrC,EAAE,cAAe,CAAC,cAAcG,OAAO,CACtCyC,aAAa,EACbnB,YAAa,0DAGdzB,EAAE,QAAS,CAAC,cAAcG,OAAO,CAChCiC,cAAc,EACdH,KAAM,wDACNa,QAASC,MAGV/C,EAAE,QAAS,CAAC,YAAa,eAAeG,OAAO,CAC9C6C,QAAS,EACTF,QAASC,IACTE,UAAW,KAGZjD,EAAE,QAAS,CAAC,YAAa,aAAaG,OAAO,CAC5C2C,QAASC,IACTC,QAAS,IAGVhD,EAAE,cAAe,CAAC,YAAa,SAASG,OAAO,CAC9C+C,YAAa,GACbzC,MAAO,EACPE,OAAQ,IAGTX,EAAE,OAAQ,CAAC,cAAcG,OAAO,CAC/BkC,SAAU,KAGX,CACC,MAAMpC,EAAOD,EAAE,WAAY,CAAC,YAAa,eAEzCC,EAAKE,OAAO,CACX+C,YAAa,KAGdE,YAASnD,EAAM,OAAQL,EAAI,wB,CAG7B,EC5OK,MAAgByD,UAAqBC,IAQhCC,YACT1D,KAAK2D,eAAeC,KAAKjE,EAAoBgB,IAAIX,KAAKC,QAEtDH,MAAM4D,YAEN1D,KAAK6D,eAAeC,SAASF,KAAK5D,KAAK+D,iBACvC/D,KAAK+D,gBAAgBD,SAASF,KAAK5D,KAAKgE,iBACzC,CAEUC,eAAeC,GACxBpE,MAAMmE,eAAeC,GACrBlE,KAAK+D,gBAAgBD,SAASK,UAAUnE,KAAKgE,iBAAkBhE,KAAK+D,gBAAgBD,SAASM,OAAS,EACvG,EAnBAC,OAAAC,eAAAd,EAAA,a,gDAAkC,iBAClCa,OAAAC,eAAAd,EAAA,c,gDAA0CC,IAAYc,WAAWC,OAAO,CAAChB,EAAaiB,c,kDCsHjF,MAAgBC,UAAsBC,IAA5CC,c,oBAYCP,OAAAC,eAAA,wB,gDAAkCtE,KAAK8D,SAASF,KAAKiB,IAAUlE,IAAIX,KAAKC,MAAO,CAAEsB,SAAU,WAAYC,YAAY,OACnH6C,OAAAC,eAAA,wB,gDAAkCtE,KAAK8D,SAASF,KAAKiB,IAAUlE,IAAIX,KAAKC,MAAO,CAAEsB,SAAU,WAAYC,YAAY,OACnH6C,OAAAC,eAAA,uB,gDAAiCtE,KAAK8D,SAASF,KAAKiB,IAAUlE,IAAIX,KAAKC,MAAO,CAAEsB,SAAU,WAAYC,YAAY,OAElH6C,OAAAC,eAAA,iB,gDAAyD,KACzDD,OAAAC,eAAA,iB,gDAAyD,KACzDD,OAAAC,eAAA,iB,gDAAyD,KAOzDD,OAAAC,eAAA,e,gDAA2DtE,KAAK8E,YAAY9E,KAAK+E,iBAoCjFV,OAAAC,eAAA,e,gDAA2DtE,KAAK8E,YAAY9E,KAAKgF,iBAoBjFX,OAAAC,eAAA,c,gDAAyDtE,KAAK8E,YAAY9E,KAAKiF,eAudhF,CAtgBQC,UAAUC,GAChB,MAAMC,EAAQpF,KAAKqF,gBAAgBvB,SAASF,KAAK5D,KAAKsF,OAAOC,QAkB7D,OAhBAH,EAAMI,GAAG,QAAQ,KAChBxF,KAAKyF,mBAAmBN,EAAS,IAGlCC,EAAMI,GAAG,eAAe,KACvBxF,KAAKyF,mBAAmBN,EAAS,IAGlCC,EAAMI,GAAG,UAAU,KAClBxF,KAAKyF,mBAAmBN,EAAS,IAGlCC,EAAMM,aAAaP,GACnBA,EAASQ,IAAI,QAASP,GACtBpF,KAAKsF,OAAO1B,KAAKwB,GAEVA,CACR,CAcOQ,UAAUT,GAChB,MAAMU,EAAQ7F,KAAK8F,gBAAgBhC,SAASF,KAAK5D,KAAK+F,OAAOR,QAI7D,OAHAM,EAAMH,aAAaP,GACnBA,EAASQ,IAAI,QAASE,GACtB7F,KAAK+F,OAAOnC,KAAKiC,GACVA,CACR,CAYUG,kBAAkBb,GAC3B,OAA6B,MAAzBA,EAASc,IAAI,QAIlB,CAKOC,SAASf,GACf,MAAMgB,EAAOnG,KAAKoG,eAAetC,SAASF,KAAK5D,KAAKqG,MAAMd,QAI1D,OAHAY,EAAKT,aAAaP,GAClBA,EAASQ,IAAI,OAAQQ,GACrBnG,KAAKqG,MAAMzC,KAAKuC,GACTA,CACR,CAEUzC,YACT1D,KAAKsG,OAAO1C,KAAK,WAAY,QAC7B9D,MAAM4D,WACP,CAEU6C,eACT,MAAM9F,EAAST,KAAKiG,IAAI,UACpBxF,GACHA,EAAO+F,QAER,MAAMC,EAAWzG,KAAKiG,IAAI,YACtBQ,GACHA,EAASD,OAEX,CAEOE,mBAON,GANA5G,MAAM4G,mBAEN1G,KAAK2G,SAAW,GAChB3G,KAAK4G,SAAW,GAChB5G,KAAK6G,SAAW,GAEZ7G,KAAK8G,aAAc,CACtB,IAAIC,EAAM,EACNC,EAAS,EACTC,EAAY,EACZC,EAAWC,IACXC,EAAQ,EACZC,OAAYrH,KAAKsH,YAAanC,IAC7B,IAAIoC,EAAepC,EAASc,IAAI,eAAgB,GAChDc,GAAOQ,EACPP,GAAUQ,KAAKC,IAAIF,EAAa,IAGjCF,OAAYrH,KAAKsH,YAAanC,IAC7B,IAAIuC,EAAQvC,EAASc,IAAI,eAAgB,GAErCyB,EAAQT,IACXA,EAAYS,GAGTA,EAAQR,IACXA,EAAWQ,GAGZN,IAEA,IAAIO,EAAeD,EAAQV,EAEb,GAAVA,IACHW,EAAe,GAGhBxC,EAASyC,OAAO,oBAAoC,IAAfD,EAAmB,IAGzD3H,KAAK6H,cAAc,WAAYX,GAC/BlH,KAAK6H,cAAc,YAAaZ,GAChCjH,KAAK6H,cAAc,WAAYd,GAC/B/G,KAAK6H,cAAc,eAAgBd,EAAMK,GACzCpH,KAAK6H,cAAc,mBAAoBb,E,CAEzC,CAQac,KAAKC,G,2GACjB,IAAIC,EAAgC,GACpCA,EAASpE,KAAKqE,EAAMH,KAAII,KAAC,KAAAH,IAEzBC,EAASpE,KAAK5D,KAAKmI,oBAAmB,EAAMJ,UACtCK,QAAQC,IAAIL,EACnB,G,CAQaM,KAAKP,G,2GACjB,IAAIC,EAAgC,GACpCA,EAASpE,KAAKqE,EAAMK,KAAIJ,KAAC,KAAAH,IAEzBC,EAASpE,KAAK5D,KAAKmI,oBAAmB,EAAOJ,UACvCK,QAAQC,IAAIL,EACnB,G,CAKOO,kBACNzI,MAAMyI,kBACFvI,KAAK8G,cACRO,OAAYrH,KAAKsH,YAAanC,IAC7BA,EAASc,IAAI,SAAS7D,KAAKoG,eAAe,KAIxCxI,KAAKyI,QAAQ,oBAAsBzI,KAAKyI,QAAQ,qBACnDpB,OAAYrH,KAAKsH,YAAanC,IAC7BnF,KAAK0I,kBAAkBvD,EAAS,IAIlCnF,KAAK2I,UACN,CAEUA,WACT3I,KAAK4I,aAAa5I,KAAK2G,UACvB3G,KAAK6I,WAAW7I,KAAK2G,UAErB3G,KAAK4I,aAAa5I,KAAK4G,UACvB5G,KAAK6I,WAAW7I,KAAK4G,UAErB5G,KAAK8I,aAAa9I,KAAK6G,UACvB7G,KAAK+I,cAAc/I,KAAK6G,UAExBQ,OAAYrH,KAAKgJ,WAAY7D,IAC5BnF,KAAKiJ,YAAY9D,EAAS,GAE5B,CAGO+D,gBACNpJ,MAAMoJ,gBACNlJ,KAAK2I,UACN,CAEUQ,gBAAgBhE,GAGzB,GAFArF,MAAMqJ,gBAAgBhE,GAEM,MAAxBA,EAASc,IAAI,QAAiB,CACjC,IAAIxF,EAAST,KAAKiG,IAAI,UAClBxF,GACH0E,EAASyC,OAAO,OAAQnH,EAAO2I,O,CAIjC,GAAmC,MAA/BjE,EAASc,IAAI,eAAwB,CACxC,IAAIQ,EAAWzG,KAAKiG,IAAI,YACpBQ,GACHtB,EAASyC,OAAO,cAAenB,EAAS2C,O,CAG3C,CASaC,aAAalE,EAA+C4C,G,2HACxE,MAAMC,EAAW,CAACC,EAAMoB,aAAYnB,KAAC,KAAA/C,EAAU4C,IAC1CuB,WAAevB,KACnBA,EAAW/H,KAAKiG,IAAI,yBAA0B,IAG/C,MAAMsD,EAASvJ,KAAKiG,IAAI,wBAExB,IAAIyB,EAAQvC,EAASc,IAAI,SAEzB,MAAMuD,EAAYrE,EAASsE,QAAQ,CAAEC,IAAK,eAAgBC,GAAIjC,EAAOK,SAAUA,EAAUwB,OAAQA,IAC7FC,GACHxB,EAASpE,KAAK4F,EAAUI,eAGzB,MAAMzD,EAAOhB,EAASc,IAAI,QACtBE,GACH6B,EAASpE,KAAKuC,EAAK2B,KAAKC,IAEzB,MAAMlC,EAAQV,EAASc,IAAI,SACvBJ,GACHmC,EAASpE,KAAKiC,EAAMiC,KAAKC,IAG1B,MAAM3C,EAAQD,EAASc,IAAI,SACvBb,GACH4C,EAASpE,KAAKwB,EAAM0C,KAAKC,IAGtB3C,EAAMa,IAAI,WACbb,EAAMhE,OAAOyI,aAAa,gBAGrBzB,QAAQC,IAAIL,EACnB,G,CASa8B,aAAa3E,EAA+C4C,G,2HACxE,MAAMC,EAAW,CAACC,EAAM6B,aAAY5B,KAAC,KAAA/C,EAAU4C,IACzCgC,EAAc/J,KAAKoB,OAAOC,OAAO,SAAU,CAAC,GAE7CiI,WAAevB,KACnBA,EAAWgC,EAAY9D,IAAI,yBAA0BjG,KAAKiG,IAAI,yBAA0B,KAGzF,MAAMsD,EAASQ,EAAY9D,IAAI,uBAAwBjG,KAAKiG,IAAI,yBAE1DuD,EAAYrE,EAASsE,QAAQ,CAAEC,IAAK,eAAgBC,GAAI,EAAG5B,SAAUA,EAAUwB,OAAQA,IACzFC,GACHxB,EAASpE,KAAK4F,EAAUI,eAGzB,MAAMzD,EAAOhB,EAASc,IAAI,QACtBE,GACH6B,EAASpE,KAAKuC,EAAKmC,KAAKP,IAEzB,MAAMlC,EAAQV,EAASc,IAAI,SACvBJ,GACHmC,EAASpE,KAAKiC,EAAMyC,KAAKP,IAG1B,MAAM3C,EAAQD,EAASc,IAAI,SAC3Bb,EAAM4E,cAEF5E,GACH4C,EAASpE,KAAKwB,EAAMkD,KAAKP,UAGpBK,QAAQC,IAAIL,EACnB,G,CAKOiC,gBAAgB9E,GACtBrF,MAAMmK,gBAAgB9E,GACtB,IAAIU,EAAQV,EAASc,IAAI,SACrBJ,IACH7F,KAAK+F,OAAOmE,YAAYrE,GACxBA,EAAMsE,WAEP,IAAIhE,EAAOhB,EAASc,IAAI,QACpBE,IACHnG,KAAKqG,MAAM6D,YAAY/D,GACvBA,EAAKgE,WAEN,IAAI/E,EAAQD,EAASc,IAAI,SACrBb,IACHpF,KAAKsF,OAAO4E,YAAY9E,GACxBA,EAAM+E,UAER,CAQOC,cAAcjF,GACpB,MAAMC,EAAQD,EAASc,IAAI,SACvBb,IAAUA,EAAMiF,YACnBjF,EAAMkF,OAER,CAQOC,gBAAgBpF,GACtB,MAAMC,EAAQD,EAASc,IAAI,SACvBb,GACHA,EAAMoF,SAER,CAKO/E,mBAAmBN,GACzB,GAAIA,EAAU,CACb,MAAMC,EAAQD,EAASc,IAAI,SAE3B,GAAIb,EAAO,CACV,MAAMqF,EAAiBtF,EAASc,IAAI,kBACpC,GAAIwE,EAAgB,CACnB,MAAMC,EAAkBD,EAAexE,IAAI,mBAC3CoB,OAAYsD,KAAiBC,IACF,MAAtBxF,EAAMa,IAAI2E,IACbF,EAAgB/E,IAAIiF,EAASxF,EAAMa,IAAI2E,G,MAM7C,CAEUhC,aAAa7C,GACtB,GAAIA,EAAQ,CAEX,IAAIqD,EAAOpJ,KAAK6K,eAEhB9E,EAAO+E,MAAK,CAACC,EAAGC,IACXD,EAAErJ,EAAIsJ,EAAEtJ,EACJ,EAECqJ,EAAErJ,EAAIsJ,EAAEtJ,GACR,EAGD,IAIT2F,OAAYtB,GAASkF,IACpB,MAAMC,EAASD,EAAEpF,MAAMsF,sBACvB,IAAIC,EAAWF,EAAOG,IAClBJ,EAAEvJ,EAAI0J,EAAWhC,IACpB6B,EAAEvJ,EAAI0H,EAAOgC,GAEdH,EAAEpF,MAAMF,IAAI,IAAKsF,EAAEvJ,GAEnB0H,EAAO6B,EAAEvJ,EAAIwJ,EAAOI,MAAM,G,CAG7B,CAEUC,aACT,OAAOvL,KAAK8F,gBAAgB0F,WAC7B,CAEUX,eACT,OAAO,CACR,CAEUhC,WAAW9C,GACpB,GAAIA,EAAQ,CACX,IAAIqD,EAAOpJ,KAAKuL,aAEhBxF,EAAO+E,MAAK,CAACC,EAAGC,IACXD,EAAErJ,EAAIsJ,EAAEtJ,EACJ,EAECqJ,EAAErJ,EAAIsJ,EAAEtJ,GACR,EAGD,IAIT2F,OAAYtB,GAASkF,IACpB,MAAMC,EAASD,EAAEpF,MAAMsF,sBACvB,IAAIM,EAAcP,EAAOI,OACrBL,EAAEvJ,EAAI+J,EAAcrC,IACvB6B,EAAEvJ,EAAI0H,EAAOqC,GAEdR,EAAEpF,MAAMF,IAAI,IAAKsF,EAAEvJ,GACnB0H,EAAO6B,EAAEvJ,EAAIwJ,EAAOG,GAAG,G,CAG1B,CAEUtC,cAAchD,GACvB,GAAIA,EAAQ,CAEX,IAAIqD,EAAO,EAEXrD,EAAO+E,MAAK,CAACC,EAAGC,IACXD,EAAErJ,EAAIsJ,EAAEtJ,EACJ,EAECqJ,EAAErJ,EAAIsJ,EAAEtJ,GACR,EAGD,IAIT2F,OAAYtB,GAASkF,IACpB,MAAMC,EAASD,EAAEpF,MAAMsF,sBACvB,IAAIO,EAAYR,EAAOS,KACnBV,EAAEvJ,EAAIgK,EAAYtC,IACrB6B,EAAEvJ,EAAI0H,EAAOsC,GAEdT,EAAEpF,MAAMF,IAAI,IAAKsF,EAAEvJ,GAEnB0H,EAAO6B,EAAEvJ,EAAIwJ,EAAOU,KAAK,G,CAG5B,CAEU9C,aAAa/C,GACtB,GAAIA,EAAQ,CACX,IAAIqD,EAAOpJ,KAAK8F,gBAAgB+F,WAEhC9F,EAAO+E,MAAK,CAACC,EAAGC,IACXD,EAAErJ,EAAIsJ,EAAEtJ,EACJ,EAECqJ,EAAErJ,EAAIsJ,EAAEtJ,GACR,EAGD,IAIT2F,OAAYtB,GAASkF,IACpB,MAAMC,EAASD,EAAEpF,MAAMsF,sBACvB,IAAIW,EAAaZ,EAAOU,MACpBX,EAAEvJ,EAAIoK,EAAa1C,IACtB6B,EAAEvJ,EAAI0H,EAAO0C,GAEdb,EAAEpF,MAAMF,IAAI,IAAKsF,EAAEvJ,GACnB0H,EAAO6B,EAAEvJ,EAAIwJ,EAAOS,IAAI,G,CAG3B,CAEOI,cACNjM,MAAMiM,cACN/L,KAAKgM,WACN,CAEU/C,YAAYgD,GAEtB,CAEUC,WACTpM,MAAMoM,WAEN,MAAMC,EAAQnM,KAAKmM,MACfA,GACHA,EAAMjI,OAAOgG,YAAYlK,KAE3B,EApiBAqE,OAAAC,eAAAI,EAAA,a,gDAAkC,kBAClCL,OAAAC,eAAAI,EAAA,c,gDAA0CC,IAAOJ,WAAWC,OAAO,CAACE,EAAcD,c,kBCtE7E,MAAO2H,UAAiB5I,EAA9BoB,c,oBASCP,OAAAC,eAAA,mB,gDAA4B,GAyH7B,CAvHWZ,YACT5D,MAAM4D,YACN1D,KAAK+D,gBAAgBzD,OAAO,CAAEmB,EAAGyB,IAAKxB,EAAGwB,KAC1C,CAEOwD,mBACN5G,MAAM4G,mBAEN,MAAM7C,EAAiB7D,KAAK6D,eACtBwI,EAAIxI,EAAeyI,aACnBC,EAAI1I,EAAe2I,cAEnBvL,EAAajB,KAAKiG,IAAI,aAAc,GACpC/E,EAAWlB,KAAKiG,IAAI,WAAY,GAChCwG,EAAczM,KAAKiG,IAAI,eAE7B,IAAIiF,EAASwB,eAAmB,EAAG,EAAGzL,EAAYC,EAAU,GAE5D,MAAMyL,EAAKN,GAAKnB,EAAOU,MAAQV,EAAOS,MAChCiB,EAAKL,GAAKrB,EAAOI,OAASJ,EAAOG,KAEvC,IAAIwB,EAAc,CAAElB,KAAM,EAAGC,MAAO,EAAGP,IAAK,EAAGC,OAAQ,GAEvD,GAAImB,aAAuBK,IAAS,CACnC,IAAIpF,EAAQ+E,EAAY/E,MACpBqF,EAAKvF,KAAKwF,IAAIL,EAAIC,GACtBlF,EAAQF,KAAKyF,IAAIF,EAAKrF,EAAOqF,EAAKvF,KAAKwF,IAAIT,EAAGF,IAAMU,EACpDF,EAAcH,eAAmB,EAAG,EAAGzL,EAAYC,EAAUwG,GAC7D1H,KAAK6H,cAAc,aAAcH,EAAQ+E,EAAY/E,M,CAGtDwD,EAASwB,cAAkB,CAACxB,EAAQ2B,IAEpC,MAAMK,EAAalN,KAAKmN,WACxBnN,KAAKmN,WAAa3F,KAAKwF,IAAIL,EAAIC,GAE/B,MAAM7L,EAASqM,kBAAuBpN,KAAKiG,IAAI,SAAU,GAAIjG,KAAKmN,YAClEnN,KAAK+D,gBAAgBzD,OAAO,CAC3B+M,IAAKtM,GAAUmK,EAAOI,OAASJ,EAAOG,KAAO,EAAGiC,IAAKvM,GAAUmK,EAAOU,MAAQV,EAAOS,MAAQ,KAG1F3L,KAAKyI,QAAQ,eAAiBzI,KAAKyI,QAAQ,aAAeyE,GAAclN,KAAKmN,aAChFnN,KAAKkE,OAAOqJ,MAAMrJ,IACjBA,EAAOsJ,cAAc,aAAa,KAIjCxN,KAAKyI,QAAQ,gBAAkBzI,KAAKyI,QAAQ,YAC9CzI,KAAKkE,OAAOqJ,MAAMrJ,IACjBA,EAAOsJ,cAAc,cAAc,GAGtC,CAWOzM,OAAOmD,GAEb,IAAInD,EAASqM,kBAAuBpN,KAAKiG,IAAI,SAAU,GAAIjG,KAAKmN,YAC5DV,EAAcW,kBAAuBpN,KAAKiG,IAAI,cAAe,GAAIlF,GAErE,GAAImD,EAAQ,CACX,IAAIuJ,EAAQzN,KAAKkE,OAAOwJ,QAAQxJ,GAC5BE,EAASpE,KAAKkE,OAAOE,OAErBuJ,EAAezJ,EAAO+B,IAAI,UAC9B,OAAoB,MAAhB0H,EACIlB,EAAcW,kBAAuBO,EAAc5M,EAAS0L,GAG5DA,GAAe1L,EAAS0L,GAAerI,GAAUqJ,EAAQ,E,CAGlE,OAAO1M,CACR,CAWO0L,YAAYvI,GAClB,MAAMnD,EAASf,KAAKe,SACpB,IAAI0L,EAAcW,kBAAuBpN,KAAKiG,IAAI,cAAe,GAAIlF,GAMrE,GAJI0L,EAAc,IACjBA,EAAc1L,EAAS0L,GAGpBvI,EAAQ,CACX,IAAIuJ,EAAQzN,KAAKkE,OAAOwJ,QAAQxJ,GAC5BE,EAASpE,KAAKkE,OAAOE,OAErBwJ,EAAoB1J,EAAO+B,IAAI,eACnC,OAAyB,MAArB2H,EACInB,EAAcW,kBAAuBQ,EAAmB7M,EAAS0L,GAGjEA,GAAe1L,EAAS0L,GAAerI,EAASqJ,C,CAGzD,OAAOhB,CACR,CAEOV,cACNjM,MAAMiM,cACN/L,KAAK6N,aAAa,SACnB,EA/HAxJ,OAAAC,eAAA8H,EAAA,a,gDAAkC,aAClC/H,OAAAC,eAAA8H,EAAA,c,gDAA0C5I,EAAae,WAAWC,OAAO,CAAC4H,EAAS3H,c,8CCL9E,MAAOqJ,UAAkBpJ,EAcpBK,cACT,OAAO,IAAIgJ,IACVC,IAASrN,IAAI,CAAC,IACd,IAAMsN,IAAMC,KAAKlO,KAAKC,MAAO,CAC5BkO,UAAWf,YAAiBpN,KAAKsF,OAAO8I,SAASnI,IAAI,YAAa,IAAK,CAAC,MAAO,YAC7E,CAACjG,KAAKsF,OAAO8I,YAElB,CAEUpJ,cACT,OAAO,IAAI+I,IACVC,IAASrN,IAAI,CAAC,IACd,IAAM0N,IAAYH,KAAKlO,KAAKC,MAAO,CAClCkO,UAAWf,YAAiBpN,KAAK+F,OAAOqI,SAASnI,IAAI,YAAa,IAAK,CAAC,MAAO,YAC7E,CAACjG,KAAK+F,OAAOqI,YAElB,CAEUnJ,aACT,OAAO,IAAI8I,IACVC,IAASrN,IAAI,CAAC,IACd,IAAM2N,IAAKJ,KAAKlO,KAAKC,MAAO,CAC3BkO,UAAWf,YAAiBpN,KAAKqG,MAAM+H,SAASnI,IAAI,YAAa,IAAK,CAAC,MAAO,YAC5E,CAACjG,KAAKqG,MAAM+H,YAEjB,CAEUjF,gBAAgBhE,GACzBrF,MAAMqJ,gBAAgBhE,GAEtB,MAAMC,EAAQpF,KAAKkF,UAAUC,GAE7BC,EAAMI,GAAG,SAAS,KACjBxF,KAAKiJ,YAAY9D,EAAS,IAE3BC,EAAMI,GAAG,eAAe,KACvBxF,KAAKiJ,YAAY9D,EAAS,IAE3BC,EAAMmJ,OAAO/I,GAAG,mBAAmB,KAClCxF,KAAKiJ,YAAY9D,EAAS,IAG3B,MAAMU,EAAQ7F,KAAK4F,UAAUT,GAE7BU,EAAM0I,OAAO/I,GAAG,mBAAmB,KAClCxF,KAAKiJ,YAAY9D,EAAS,IAG3BnF,KAAKkG,SAASf,GAEdC,EAAMmJ,OAAO/I,GAAG,mBAAmB,KAClCK,EAAMmG,WAAW,GAEnB,CAEUT,aACT,MAAMY,EAAQnM,KAAKmM,MACnB,OAAIA,EACIA,EAAMgB,WAEPnN,KAAK8F,gBAAgB0F,YAAc,CAC3C,CAEUX,eACT,MAAMsB,EAAQnM,KAAKmM,MACnB,OAAIA,GACKA,EAAMgB,YAEPnN,KAAK8F,gBAAgB0F,YAAc,CAE5C,CAEO9E,mBACN5G,MAAM4G,mBACN,MAAMyF,EAAQnM,KAAKmM,MACnB,GAAIA,EAAO,CAEV,GAAInM,KAAKyI,QAAQ,eAAgB,CAChC,IAAI+F,EAAiBxO,KAAK+F,OAAOqI,SAEjC,GAAIpO,KAAKiG,IAAI,eACZuI,EAAe7I,IAAI,WAAY,eAE3B,CACJ,IAAIxD,EAAWqM,EAAevI,IAAI,YAClB,MAAZ9D,GAAgC,WAAZA,GACvBqM,EAAe7I,IAAI,WAAY,W,EAMlC,GAAI3F,KAAK8G,cAAgB9G,KAAKyI,QAAQ,WAAazI,KAAKyI,QAAQ,gBAAkBzI,KAAKyI,QAAQ,eAAiBzI,KAAKyI,QAAQ,aAAezI,KAAKyI,QAAQ,eAAgB,CACxKzI,KAAKyO,kBACL,MAAMxN,EAAajB,KAAKiG,IAAI,aAAckG,EAAMlG,IAAI,cAAe,KAE7DyI,EADW1O,KAAKiG,IAAI,WAAYkG,EAAMlG,IAAI,WAAY,MACrChF,EACvB,IAAI0N,EAAe1N,EAEnB,MAAMF,EAASoL,EAAMpL,OAAOf,MAC5BA,KAAK6H,cAAc,SAAU9G,GAC7B,IAAI0L,EAAcN,EAAMM,YAAYzM,MAAQmM,EAAMyC,WAAW,aAAc,GAEvEnC,EAAc,IACjBA,EAAc1L,EAAS0L,GAIxBpF,OAAYrH,KAAKsH,YAAanC,IAE7BnF,KAAK0I,kBAAkBvD,GAEvB,IAAI0J,EAAaH,EAAMvJ,EAASc,IAAI,qBAAuB,IAC3D,MAAMb,EAAQD,EAASc,IAAI,SAC3B,GAAIb,EAAO,CACVA,EAAMO,IAAI,SAAU5E,GACpBqE,EAAMO,IAAI,cAAe8G,GACzBrH,EAAMO,IAAI,aAAcgJ,GAExBvJ,EAAMO,IAAI,MAAOkJ,GAEjB,MAAMC,EAAQ3J,EAASc,IAAI,QAC3Bb,EAAM2J,YAAY,OAAQD,GAC1B1J,EAAM2J,YAAY,SAAUD,GAE5B,MAAME,EAAc7J,EAASc,IAAI,eACjCb,EAAM2J,YAAY,cAAeC,E,CAGlC,IAAIC,EAAcvC,iBAAqBiC,EAAeE,EAAa,GAEnE,MAAMhJ,EAAQV,EAASc,IAAI,SAC3B,GAAIJ,IACHA,EAAMqJ,WAAW,SAAUnO,GAC3B8E,EAAMqJ,WAAW,cAAezC,GAChC5G,EAAMF,IAAI,aAAcsJ,GAEK,WAAzBpJ,EAAMI,IAAI,aAA0B,CACvC,IAAIkJ,EAAcpO,EAAS8E,EAAMI,IAAI,SAAU,GAC3CvE,EAAIX,EAAS2L,MAAUuC,GAEvBA,EAAc,IAAMA,GAAe,KACjCpJ,EAAMwE,YAAexE,EAAMuJ,YAC/BpP,KAAK2G,SAAS/C,KAAK,CAAEiC,MAAOA,EAAOnE,EAAGA,IAEvCyN,IAAgB,EAChBA,GAAenP,KAAK8F,gBAAgBG,IAAI,cAAe,GACvDJ,EAAMF,IAAI,UAAW9E,KACrBgF,EAAMgC,cAAc,QAAQ,KAGvBhC,EAAMwE,YAAexE,EAAMuJ,YAC/BpP,KAAK4G,SAAShD,KAAK,CAAEiC,MAAOA,EAAOnE,EAAGA,IAEvCyN,GAAenP,KAAK8F,gBAAgBG,IAAI,eAAgB,GACxDJ,EAAMF,IAAI,UAAW,GACrBE,EAAMgC,cAAc,QAAQ,IAE7BhC,EAAMF,IAAI,IAAKwJ,GACftJ,EAAMF,IAAI,IAAK5E,EAAS2L,MAAUuC,G,CAGpCN,GAAgBE,EAChB7O,KAAKiJ,YAAY9D,EAAS,G,EAK9B,CAEU8D,YAAY9D,GACrB,MAAMgB,EAAOhB,EAASc,IAAI,QACpBJ,EAAQV,EAASc,IAAI,SACrBb,EAAQD,EAASc,IAAI,SACrBzD,EAAW2D,EAAKF,IAAI,WAAY,GACtC,GAAIE,GAAQN,GAAST,EAAO,CAC3B,MAAMrE,GAAUqE,EAAMa,IAAI,cAAe,GAAKb,EAAMa,IAAI,SAAU,IAAMb,EAAMa,IAAI,QAAS,GAAKzD,EAC1F6M,EAAaxJ,EAAMI,IAAI,aAAc,GACrCqJ,EAAM5C,MAAU2C,GAChBE,EAAM7C,MAAU2C,GAEhBvJ,EAAkB9F,KAAK8F,gBACvB0J,EAAK1J,EAAgBG,IAAI,cAAe,GACxCwJ,EAAK3J,EAAgBG,IAAI,eAAgB,GAE/C,IAAIxE,EAAI,EACJC,EAAI,EAERD,EAAIoE,EAAMpE,IACVC,EAAImE,EAAMnE,IACV,IAAIgO,EAAuB,GAE3B,GAAQ,GAALjO,GAAe,GAALC,EAAO,CACnB,GAA6B,YAAzBmE,EAAMI,IAAI,YAA2B,CACxC,MAAMkJ,EAActJ,EAAM9E,SAAW8E,EAAMI,IAAI,gBAAiB,GAC1DoJ,EAAaxJ,EAAMI,IAAI,aAAc,GAC3CxE,EAAI0N,EAAczC,MAAU2C,GAC5B3N,EAAIyN,EAAczC,MAAU2C,E,CAG7B,IAAI/B,GAAMmC,EACN5J,EAAM+I,WAAW,UACpBtB,EAAKkC,GAENE,EAAS,CAAC,CAAEjO,EAAG2D,EAAM3D,IAAMV,EAASuO,EAAK5N,EAAG0D,EAAM1D,IAAMX,EAASwO,GAAO,CAAE9N,EAAGA,EAAI6L,EAAI5L,EAAGA,GAAK,CAAED,EAAGA,EAAGC,EAAGA,G,CAGzGyE,EAAKR,IAAI,SAAU+J,E,CAErB,CAEOC,gBAAgBC,GAEtB,MAAMC,EAASD,EAAO3J,IAAI,UAC1B,GAAI4J,EAAQ,CACX,MACMzK,EADWyK,EAAO1K,SACDc,IAAI,SAE3B,GAAIb,EAAO,CACV,MAAMqH,EAAcrH,EAAMa,IAAI,cAAe,GACvClF,EAASqE,EAAMa,IAAI,SAAU,GAM7B6J,EALa1K,EAAMa,IAAI,aAAc,GAC/Bb,EAAMa,IAAI,MAAO,GACX2J,EAAO3J,IAAI,YAAa,IAIpC9F,EAAIsM,GAAe1L,EAAS0L,GAHhBmD,EAAO3J,IAAI,YAAa,IAK1C4J,EAAOvP,OAAO,CAAEmB,EAAGiL,MAAUoD,GAAS3P,EAAGuB,EAAGgL,MAAUoD,GAAS3P,G,EAGlE,EAlPAkE,OAAAC,eAAAwJ,EAAA,a,gDAAkC,cAClCzJ,OAAAC,eAAAwJ,EAAA,c,gDAA0CpJ,EAAcH,WAAWC,OAAO,CAACsJ,EAAUrJ,cCrChF,MAAOsL,UAAoBC,IAAjCpL,c,oBAMCP,OAAAC,eAAA,yB,iDAAsC,IAEtCD,OAAAC,eAAA,a,gDAAyB,IACzBD,OAAAC,eAAA,a,gDAAyB,IAEzBD,OAAAC,eAAA,a,gDAAyB,IACzBD,OAAAC,eAAA,a,gDAAyB,IAEzBD,OAAAC,eAAA,a,gDAAyB,IACzBD,OAAAC,eAAA,a,gDAAyB,IAEzBD,OAAAC,eAAA,a,gDAAyB,IACzBD,OAAAC,eAAA,a,gDAAyB,IAEzBD,OAAAC,eAAA,c,gDAA0B,IAC1BD,OAAAC,eAAA,c,gDAA0B,IAC1BD,OAAAC,eAAA,c,gDAA0B,IAC1BD,OAAAC,eAAA,c,gDAA0B,GAmG3B,CAjGWZ,YACT5D,MAAM4D,YACN1D,KAAK2F,IAAI,QAASsK,IACjBA,EAAQC,OAAOlQ,KAAKmQ,KAAMnQ,KAAKoQ,MAC/BH,EAAQI,OAAOrQ,KAAKsQ,KAAMtQ,KAAKuQ,MAC/BN,EAAQO,iBAAiBxQ,KAAKyQ,MAAOzQ,KAAK0Q,MAAO1Q,KAAK2Q,KAAM3Q,KAAK4Q,MACjEX,EAAQI,OAAOrQ,KAAK6Q,KAAM7Q,KAAK8Q,MAC/Bb,EAAQO,iBAAiBxQ,KAAK+Q,MAAO/Q,KAAKgR,MAAOhR,KAAKmQ,KAAMnQ,KAAKoQ,KAAK,GAExE,CAEOa,SAASC,EAAmBC,GAClC,IAAI9E,EAAIrM,KAAKY,QACT2L,EAAIvM,KAAKc,SAEb,MAAMsQ,EAAKpR,KAAKiG,IAAI,WAAY,GAC1BoL,EAAKrR,KAAKiG,IAAI,cAAe,GAEnC,GAA+B,YAA3BjG,KAAKiG,IAAI,eAA8B,CAC1C,IAAIqL,GAAOF,EAAK,EACZG,EAAMH,EAAK,EAKXI,EAAMF,IAFED,EAAK,EAEMC,GAAOH,EAG9B,MAAO,CAAE1P,EAAG+P,GAFFD,GAJAF,EAAK,EAIQE,GAAOJ,EAELK,GAAON,EAAWxP,EAAG6K,EAAI4E,E,CAE9C,CACJ,IAAIG,GAAOF,EAAK,EACZG,EAAMH,EAAK,EAKXI,EAAMF,IAFED,EAAK,EAEMC,GAAOJ,EAG9B,MAAO,CAAEzP,EAAG4K,EAAI6E,EAAWxP,EAAG8P,GAFpBD,GAJAF,EAAK,EAIQE,GAAOL,EAEaM,GAAOL,E,CAGpD,CAEOM,WAEN,GAAIzR,KAAKyI,QAAQ,aAAezI,KAAKyI,QAAQ,gBAAkBzI,KAAKyI,QAAQ,mBAAqBzI,KAAKyI,QAAQ,gBAAkBzI,KAAKyI,QAAQ,UAAYzI,KAAKyI,QAAQ,UAAW,CAChL,MAAM4D,EAAIrM,KAAKY,QACT2L,EAAIvM,KAAKc,SACTsQ,EAAKpR,KAAKiG,IAAI,WAAY,GAC1BoL,EAAKrR,KAAKiG,IAAI,cAAe,GACnCjG,KAAK0R,QAAS,EAEd,IAAIC,EAAK3R,KAAKiG,IAAI,iBAAkB,GAEL,YAA3BjG,KAAKiG,IAAI,gBACZjG,KAAKmQ,MAAQiB,EAAK,EAClBpR,KAAKoQ,KAAO,EAEZpQ,KAAKsQ,KAAOc,EAAK,EACjBpR,KAAKuQ,KAAO,EAEZvQ,KAAK2Q,KAAOU,EAAK,EACjBrR,KAAK4Q,KAAOrE,EAEZvM,KAAK6Q,MAAQQ,EAAK,EAClBrR,KAAK8Q,KAAOvE,EAEZvM,KAAKyQ,MAAQzQ,KAAKsQ,MAAQtQ,KAAK2Q,KAAO3Q,KAAKsQ,MAAQ,EAAIqB,EAAKpF,EAC5DvM,KAAK0Q,MAAQ1Q,KAAKuQ,KAAO,GAAMhE,EAE/BvM,KAAK+Q,MAAQ/Q,KAAKmQ,MAAQnQ,KAAK6Q,KAAO7Q,KAAKmQ,MAAQ,EAAIwB,EAAKpF,EAC5DvM,KAAKgR,MAAQhR,KAAKoQ,KAAO,GAAM7D,IAG/BvM,KAAKoQ,MAAQgB,EAAK,EAClBpR,KAAKmQ,KAAO,EAEZnQ,KAAKuQ,KAAOa,EAAK,EACjBpR,KAAKsQ,KAAO,EAEZtQ,KAAK4Q,KAAOS,EAAK,EACjBrR,KAAK2Q,KAAOtE,EAEZrM,KAAK8Q,MAAQO,EAAK,EAClBrR,KAAK6Q,KAAOxE,EAEZrM,KAAK0Q,MAAQ1Q,KAAKuQ,MAAQvQ,KAAK4Q,KAAO5Q,KAAKuQ,MAAQ,EAAIoB,EAAKtF,EAC5DrM,KAAKyQ,MAAQzQ,KAAKsQ,KAAO,GAAMjE,EAE/BrM,KAAKgR,MAAQhR,KAAKoQ,MAAQpQ,KAAK8Q,KAAO9Q,KAAKoQ,MAAQ,EAAIuB,EAAKtF,EAC5DrM,KAAK+Q,MAAQ/Q,KAAKmQ,KAAO,GAAM9D,E,CAGjCvM,MAAM2R,UACP,EArHApN,OAAAC,eAAAyL,EAAA,a,gDAAkC,gBAClC1L,OAAAC,eAAAyL,EAAA,c,gDAA0CC,IAASzL,WAAWC,OAAO,CAACuL,EAAYtL,c,YC8D7E,MAAOmN,UAAqBlN,EAAlCE,c,oBAOCP,OAAAC,eAAA,a,gDAAiB,WAwCjBD,OAAAC,eAAA,c,gDAA0DtE,KAAK8E,YAAY9E,KAAK6R,gBA6BhFxN,OAAAC,eAAA,e,gDAA2B,IAC3BD,OAAAC,eAAA,e,gDAA2B,IAC3BD,OAAAC,eAAA,mB,gDAA+B,IAE/BD,OAAAC,eAAA,kB,iDAA+B,GAsbhC,CAzfWS,cACT,OAAO,IAAIgJ,IACVC,IAASrN,IAAI,CAAC,IACd,IAAMoP,EAAY7B,KAAKlO,KAAKC,MAAO,CAClCkO,UAAWf,YAAiBpN,KAAKsF,OAAO8I,SAASnI,IAAI,YAAa,IAAK,CAACjG,KAAK8R,KAAM,SAAU,QAAS9R,KAAKiG,IAAI,kBAC7G,CAACjG,KAAKsF,OAAO8I,YAElB,CAEUpJ,cACT,OAAO,IAAI+I,IACVC,IAASrN,IAAI,CAAC,IACd,IAAMoR,IAAM7D,KAAKlO,KAAKC,MAAO,CAC5BkO,UAAWf,YAAiBpN,KAAK+F,OAAOqI,SAASnI,IAAI,YAAa,IAAK,CAACjG,KAAK8R,KAAM,SAAU,QAAS9R,KAAKiG,IAAI,kBAC7G,CAACjG,KAAK+F,OAAOqI,YAElB,CAEUnJ,aACT,OAAO,IAAI8I,IACVC,IAASrN,IAAI,CAAC,IACd,IAAM2N,IAAKJ,KAAKlO,KAAKC,MAAO,CAC3BkO,UAAWf,YAAiBpN,KAAKqG,MAAM+H,SAASnI,IAAI,YAAa,IAAK,CAACjG,KAAK8R,KAAM,SAAU,OAAQ9R,KAAKiG,IAAI,kBAC3G,CAACjG,KAAKqG,MAAM+H,YAEjB,CAWUyD,aACT,OAAO,IAAI9D,IACVC,IAASrN,IAAI,CAAC,IACd,IAAMoP,EAAY7B,KAAKlO,KAAKC,MAAO,CAClCkO,UAAWf,YAAiBpN,KAAKgS,MAAM5D,SAASnI,IAAI,YAAa,IAAK,CAACjG,KAAK8R,KAAM,SAAU,OAAQ9R,KAAKiG,IAAI,kBAC3G,CAACjG,KAAKgS,MAAM5D,YAEjB,CAKO6D,SAAS9M,GACf,MAAM+M,EAAOlS,KAAKqF,gBAAgBvB,SAASF,KAAK5D,KAAKgS,MAAMzM,QAI3D,OAHA2M,EAAKxM,aAAaP,GAClBA,EAASQ,IAAI,OAAQuM,GACrBlS,KAAKgS,MAAMpO,KAAKsO,GACTA,CACR,CAeUxO,YACT5D,MAAM4D,YACN,MAAM2B,EAAkBrF,KAAKqF,gBAC7BA,EAAgB/E,OAAO,CAAEkB,YAAY,EAAMD,SAAU,WAAYX,MAAOI,YAAQ,KAAMF,OAAQE,YAAQ,OACtGqE,EAAgB8M,UAAU,SAAS,KAClCnS,KAAKoS,eAAe,IAGrB/M,EAAgB8M,UAAU,UAAU,KACnCnS,KAAKoS,eAAe,IAGU,YAA3BpS,KAAKiG,IAAI,eACZjG,KAAK2F,IAAI,SAAU3F,KAAKC,MAAMoS,kBAG9BrS,KAAK2F,IAAI,SAAU3F,KAAKC,MAAMqS,eAEhC,CAEUnJ,gBAAgBhE,GACzBrF,MAAMqJ,gBAAgBhE,GAEtB,MAAMC,EAAQpF,KAAKkF,UAAUC,GAE7BC,EAAMM,aAAaP,GAEnBA,EAASQ,IAAI,QAASP,GAEtBpF,KAAKiS,SAAS9M,GACd,MAAMU,EAAQ7F,KAAK4F,UAAUT,GAE7BU,EAAML,GAAG,KAAK,KACbxF,KAAKiJ,YAAY9D,EAAS,IAG3BU,EAAML,GAAG,KAAK,KACbxF,KAAKiJ,YAAY9D,EAAS,IAG3BnF,KAAKkG,SAASf,GAEdC,EAAMmJ,OAAO/I,GAAG,mBAAmB,KAClCK,EAAMmG,WAAW,IAGlB5G,EAAMmJ,OAAO/I,GAAG,iBAAiB,KAChC,MAAML,EAAWC,EAAMD,SACnBA,GACHnF,KAAKiJ,YAAY9D,E,GAGpB,CAGOoD,kBACNvI,KAAKuS,WAAY,EACkC,GAA/CvS,KAAK8D,SAAS4J,QAAQ1N,KAAK8F,mBAC9B9F,KAAKuS,WAAY,GAGlB,IAAIC,EAAQ,EACRpL,EAAQ,EAgCZ,GA9BAC,OAAYrH,KAAKgJ,WAAY7D,IAC5B,MAAMuC,EAAQvC,EAASc,IAAI,SACvBqD,WAAe5B,KAClBN,IACIM,EAAQ,EACX8K,GAAShL,KAAKC,IAAItC,EAASc,IAAI,eAAgByB,GAASA,GAGpD1H,KAAKiG,IAAI,oBAAoB,IAI5Bd,EAASkF,WAHbjD,IAOCoL,GAAS,E,IAOdxS,KAAKyS,OAAS,EAAIrL,EAAQoL,EAC1BxS,KAAK0S,OAAStL,EAEVpH,KAAKyI,QAAQ,gBAChBzI,KAAK2S,aAGF3S,KAAKyS,OAAS,IAAMzS,KAAK8G,cAAgB9G,KAAK4S,YAAa,CAE9D,MAAMvN,EAAkBrF,KAAKqF,gBAE7B,IAAIkH,EAEHA,EAD8B,YAA3BvM,KAAKiG,IAAI,eACRZ,EAAgBmH,cAGhBnH,EAAgBiH,aAGrBtM,KAAK6S,WAAa7S,KAAKiG,IAAI,gBAAiB,GAAKsG,EAEjDvM,KAAKyO,kBAEL,IAAIqE,EAAI,EACRzL,OAAYrH,KAAKsH,YAAanC,IAC7BnF,KAAK0I,kBAAkBvD,GAEvBA,EAASQ,IAAI,QAASmN,GACtBA,IAEA,MAAM1N,EAAQD,EAASc,IAAI,SACrBE,EAAOhB,EAASc,IAAI,QACpBJ,EAAQV,EAASc,IAAI,SACrBiM,EAAO/M,EAASc,IAAI,QACpB6I,EAAQ3J,EAASc,IAAI,QACrB+I,EAAc7J,EAASc,IAAI,eAEjCb,EAAM2J,YAAY,OAAQD,GAC1B1J,EAAM2J,YAAY,SAAUD,GAC5B1J,EAAM2J,YAAY,cAAeC,GACjCkD,EAAKnD,YAAY,OAAQD,GACzBoD,EAAKnD,YAAY,SAAUD,GAE3B,MAAMpH,EAAQvC,EAASc,IAAI,SACvBqD,WAAe5B,KACL,GAATA,GAAc1H,KAAKiG,IAAI,qBAC1Bb,EAAM8J,WAAW,WAAW,GAC5B/I,EAAK+I,WAAW,WAAW,GAC3BrJ,EAAMqJ,WAAW,WAAW,KAG5B9J,EAAM8J,WAAW,WAAW,GAC5B/I,EAAK+I,WAAW,WAAW,GAC3BrJ,EAAMqJ,WAAW,WAAW,GAE5BlP,KAAK+S,cAAc5N,GAEfnF,KAAKgT,OAAO7N,GACf+M,EAAKhD,WAAW,WAAW,GAElB/J,EAASkF,YAClB6H,EAAKhD,WAAW,WAAW,I,IAMhCpP,MAAMyI,iBACP,CAEUoK,aAET,MAAM9P,EAAc7C,KAAKiG,IAAI,eACvBH,EAAkB9F,KAAK8F,gBACvB0I,EAAiBxO,KAAK+F,OAAOqI,SAE/BpO,KAAKiG,IAAI,gBACZH,EAAgBH,IAAI,WAAY,YAChCG,EAAgBxF,OAAO,CAAEkB,YAAY,IAClB,YAAfqB,GACH7C,KAAK2F,IAAI,SAAU3F,KAAKC,MAAMoS,kBAC9B7D,EAAelO,OAAO,CAAE6C,QAAStC,IAAMY,EAAGZ,QAG1Cb,KAAK2F,IAAI,SAAU3F,KAAKC,MAAMqS,gBAC9B9D,EAAelO,OAAO,CAAE6C,QAAS,EAAG1B,EAAG,OAIxCqE,EAAgBxF,OAAO,CAAEkB,YAAY,EAAOD,SAAU,aACnC,YAAfsB,GACHiD,EAAgBxF,OAAO,CAAEmB,EAAGyB,MAC5BsL,EAAelO,OAAO,CAAE6C,QAASD,IAAKzB,EAAG,MAGzCqE,EAAgBxF,OAAO,CAAEoB,EAAGwB,MAC5BsL,EAAelO,OAAO,CAAE6C,QAASD,IAAKxB,EAAG,MAG3C1B,KAAKoS,eACN,CAEUa,aAAa9N,GACtB,IAAIsI,EAAQtI,EAASc,IAAI,SACrBiN,EAAY/N,EAASc,IAAI,eAAgB,GAC7C,GAAIwH,EAAQzN,KAAKgJ,UAAU5E,OAAS,EAAG,CACtC,IAAI+O,EAAWnT,KAAKgJ,UAAUyE,EAAQ,GAGtC,GAFAyF,EAAYC,EAASlN,IAAI,eAAgB,GAErCkN,EAAS9I,YAAwC,GAAzB8I,EAASlN,IAAI,UAAiBjG,KAAKiG,IAAI,oBAClE,OAAOjG,KAAKiT,aAAaE,E,CAG3B,OAAOD,CACR,CAEUF,OAAO7N,GAChB,IAAIsI,EAAQtI,EAASc,IAAI,SACzB,GAAIwH,GAASzN,KAAKgJ,UAAU5E,OAAS,EACpC,OAAO,EAGP,IAAK,IAAI0O,EAAIrF,EAAQ,EAAGqF,EAAI9S,KAAKgJ,UAAU5E,OAAQ0O,IAClD,IAAK9S,KAAKgJ,UAAU8J,GAAGzI,WACtB,OAAO,EAIV,OAAO,CACR,CAEU0I,cAAc5N,GACvB,MAAMtC,EAAc7C,KAAKiG,IAAI,eAEvBb,EAAQD,EAASc,IAAI,SACrBJ,EAAQV,EAASc,IAAI,SACrBiM,EAAO/M,EAASc,IAAI,QAEpBZ,EAAkBrF,KAAKqF,gBAE7B,IAAIwG,EAAWxG,EAAgBiH,aAC3Bd,EAAYnG,EAAgBmH,cAE5B4G,EAAUvH,EACK,cAAfhJ,IACHuQ,EAAU5H,GAGX,MAAM0H,EAAYlT,KAAKiT,aAAa9N,GAC9BuC,EAAQvC,EAASc,IAAI,QAAS,GAC9BoN,EAAe7L,KAAKC,IAAItC,EAASc,IAAI,eAAgByB,IACrD4L,EAActT,KAAKiG,IAAI,cAAe,GACtCgB,EAAYjH,KAAK4O,WAAW,YAAa,GAG/C,IAAI2E,EAAI,EACK,GAAT7L,EACH6L,EAAIF,EAAe7L,KAAKC,IAAIC,GAGxBvC,EAASkF,aACZkJ,EAAI,MAIFvT,KAAK6S,YAAc1L,MACtBnH,KAAK6S,WAAa,GAGnB,IAAIW,EAAWH,EAAepM,EAAYmM,EACtCK,GAAeJ,GAAgBA,EAAeH,GAAaI,GAAerM,EAAYmM,EAE1FhO,EAAM9E,OAAO,CAAEkT,WAAUC,cAAa5Q,gBACtCqP,EAAK5R,OAAO,CAAEkT,SAAUC,EAAaA,aAAcJ,GAAgBA,EAAeH,IAAcjM,EAAYmM,EAASvQ,gBAErH,MAAMF,EAAgB3C,KAAKiG,IAAI,gBAAiB,GAC1CrD,EAAc5C,KAAKiG,IAAI,cAAe,GAE5C,GAAmB,YAAfpD,EAA2B,CAE9B,IAAI6Q,EAAaxB,EAAKpR,SAAWyS,EAEjC/H,EAAYA,GAAa5I,EAAcD,GAAiB+Q,EAExDtO,EAAMO,IAAI,IAAK3F,KAAK6S,YAEpB,IAAI/R,EAAS0G,KAAKwF,IAAI,IAAQxF,KAAKyF,IAAI,EAAGzB,EAAYxL,KAAK0S,OAASa,EAAIvT,KAAKyS,OAASiB,IAEtFtO,EAAM9E,OAAO,CAAEQ,SAAQW,EAAGoK,EAAW,IACrC,IAAI8H,EAAS3T,KAAK6S,WAAa/R,EAAS,EACxC+E,EAAMF,IAAI,IAAKgO,GAEf3T,KAAK6S,YAAc/R,EAAS4S,EAC5BxB,EAAK5R,OAAO,CAAEoB,EAAG1B,KAAK6S,WAAaa,EAAYjS,EAAGoK,EAAW,G,KAEzD,CACJ,IAAI6H,EAAaxB,EAAKtR,QAAU2S,EAEhC1H,EAAWA,GAAYjJ,EAAcD,GAAiB+Q,EAEtDtO,EAAMO,IAAI,IAAK3F,KAAK6S,YAEpB,IAAIjS,EAAQ4G,KAAKwF,IAAI,IAAQxF,KAAKyF,IAAI,EAAGpB,EAAW7L,KAAK0S,OAASa,EAAIvT,KAAKyS,OAASiB,IAEpFtO,EAAM9E,OAAO,CAAEM,QAAOc,EAAG8J,EAAY,IACrC,MAAMoI,EAAS5T,KAAK6S,WAAajS,EAAQ,EACzCiF,EAAMF,IAAI,IAAKiO,GAEf5T,KAAK6S,YAAcjS,EAAQ8S,EAC3BxB,EAAK5R,OAAO,CAAEmB,EAAGzB,KAAK6S,WAAaa,EAAYhS,EAAG8J,EAAY,G,CAEhE,CASa1B,aAAa3E,EAA+C4C,G,2HAExE,OADA5C,EAASc,IAAI,QAAQqC,KAAKP,GACnBE,EAAM6B,aAAY5B,KAAC,KAAA/C,EAAU4C,EACrC,G,CASasB,aAAalE,EAA+C4C,G,2HAExE,OADA5C,EAASc,IAAI,QAAQ6B,KAAKC,GACnBE,EAAMoB,aAAYnB,KAAC,KAAA/C,EAAU4C,EACrC,G,CAEUkB,YAAY9D,GACrB,GAAInF,KAAKiG,IAAI,eAAgB,CAC5B,MAAME,EAAOhB,EAASc,IAAI,QACpBJ,EAAQV,EAASc,IAAI,SACrBb,EAAQD,EAASc,IAAI,SAE3B,GAAIE,GAAQf,GAASS,EAAO,CAE3B,MAAMC,EAAkB9F,KAAK8F,gBACvBT,EAAkBrF,KAAKqF,gBAC7B,IAAIwO,EAAe1N,EAAKF,IAAI,WAAY,IAExC,MAAM6N,EAAMhO,EAAgBlF,QACtBmT,EAAMjO,EAAgBhF,SAEtB0O,EAAK1J,EAAgBG,IAAI,cAAe,GACxCwJ,EAAK3J,EAAgBG,IAAI,eAAgB,GACzC+N,EAAKlO,EAAgBG,IAAI,aAAc,GACvCgO,EAAKnO,EAAgBG,IAAI,gBAAiB,GAEhD,IAAIiO,EAAK,CAAEzS,EAAG,EAAGC,EAAG,GAChByS,EAAK,CAAE1S,EAAG,EAAGC,EAAG,GAChB0S,EAAK,CAAE3S,EAAG,EAAGC,EAAG,GAEhB1B,KAAKuS,YACRsB,EAAe,EAAIA,GAGW,YAA3B7T,KAAKiG,IAAI,gBACZiO,EAAK9O,EAAM6L,SAAS4C,EAAc,IAClCK,EAAGzS,GAAK2D,EAAM3D,IAAM4D,EAAgB5D,IACpCyS,EAAGxS,GAAK0D,EAAM1D,IAAM2D,EAAgB3D,IAEhC1B,KAAKuS,WACR4B,EAAG1S,EAAIqS,EACPK,EAAGzS,EAAImE,EAAMnE,IAEb0S,EAAG3S,EAAIqS,EAAMtE,EACb4E,EAAG1S,EAAIyS,EAAGzS,IAGVyS,EAAG1S,EAAI4D,EAAgB5D,IAAM4D,EAAgBzE,QAC7CuT,EAAGzS,EAAImE,EAAMnE,IAEb0S,EAAG3S,EAAI0S,EAAG1S,EAAIqS,EAAMjO,EAAMjF,QAAU6O,EACpC2E,EAAG1S,EAAIyS,EAAGzS,KAIXwS,EAAK9O,EAAM6L,SAAS,GAAK4C,GACzBK,EAAGzS,GAAK2D,EAAM3D,IAAM4D,EAAgB5D,IACpCyS,EAAGxS,GAAK0D,EAAM1D,IAAM2D,EAAgB3D,IAEhC1B,KAAKuS,WACR4B,EAAGzS,EAAIqS,EACPI,EAAG1S,EAAIoE,EAAMpE,IAEb2S,EAAG1S,EAAIqS,EAAMC,EACbI,EAAG3S,EAAI0S,EAAG1S,IAGV0S,EAAGzS,EAAI2D,EAAgB3D,IAAM2D,EAAgBvE,SAC7CqT,EAAG1S,EAAIoE,EAAMpE,IAEb2S,EAAG1S,EAAIyS,EAAGzS,EAAIqS,EAAMlO,EAAM/E,SAAWmT,EACrCG,EAAG3S,EAAI0S,EAAG1S,IAIZ0E,EAAKR,IAAI,SAAU,CAACuO,EAAIC,EAAIC,G,EAG/B,CAKOnK,gBAAgB9E,GACtBrF,MAAMmK,gBAAgB9E,GACtB,IAAI+M,EAAO/M,EAASc,IAAI,QACpBiM,IACHlS,KAAKgS,MAAM9H,YAAYgI,GACvBA,EAAK/H,UAEP,CAEOwF,gBAAgBC,GAEtB,MAAMC,EAASD,EAAO3J,IAAI,UAC1B,GAAI4J,EAAQ,CACX,MACMzK,EADWyK,EAAO1K,SACDc,IAAI,SAE3B,GAAIb,EAAO,CACV,MAAMxE,EAAQwE,EAAMxE,QACdE,EAASsE,EAAMtE,SACfoQ,EAAYtB,EAAO3J,IAAI,YAAa,IACpCkL,EAAYvB,EAAO3J,IAAI,YAAa,IAE1C,IAAIqH,EAAK,EACLD,EAAK,EACsB,cAA3BrN,KAAKiG,IAAI,eACZoH,EAAKvM,EAAS,EAGdwM,EAAK1M,EAAQ,EAGdiP,EAAOvP,OAAO,CAAEmB,EAAG2D,EAAM3D,IAAMb,EAAQsQ,EAAY5D,EAAI5L,EAAG0D,EAAM1D,IAAM2L,EAAKvM,EAASqQ,G,EAGvF,EAhcA9M,OAAAC,eAAAsN,EAAA,a,gDAAkC,iBAClCvN,OAAAC,eAAAsN,EAAA,c,gDAA0ClN,EAAcH,WAAWC,OAAO,CAACoN,EAAanN,cCvHnF,MAAO4P,UAAsBzC,EAAnChN,c,oBACCP,OAAAC,eAAA,a,gDAAiB,YASjBD,OAAAC,eAAA,kB,wDA8HD,CA5HQoC,mBACN5G,MAAM4G,mBACN1G,KAAKsU,eAAYC,CAClB,CAEUxB,cAAc5N,GACvB,MAAMtC,EAAc7C,KAAKiG,IAAI,eACvBZ,EAAkBrF,KAAKqF,gBAEvBD,EAAQD,EAASc,IAAI,SACrBJ,EAAQV,EAASc,IAAI,SACrBiM,EAAO/M,EAASc,IAAI,QACpB3C,EAAUtD,KAAKiG,IAAI,UAAW,QAE9Bc,EAAM/G,KAAK4O,WAAW,mBAAoB,GAEhD,GAAW,GAAP7H,EACH,OAGD,MAAMpE,EAAgB3C,KAAKiG,IAAI,gBAAiB,GAC1CrD,EAAc5C,KAAKiG,IAAI,cAAe,GAEtCmL,EAAKpR,KAAKiG,IAAI,WAAY,GAC1BoL,EAAKrR,KAAKiG,IAAI,cAAepF,KAE7BwS,EAAe7L,KAAKC,IAAItC,EAASc,IAAI,eAAgB,IACrDyB,EAAQvC,EAASc,IAAI,QAAS,GAEpC,IAAIuO,EACAC,EAEAC,EAAgBrP,EAAgBmH,cAChCmI,EAAetP,EAAgBiH,aAC/BsI,EAAY1C,EAAKtR,QACjB8S,EAAaxB,EAAKpR,SAEH,cAAf+B,KACF8R,EAAcD,GAAiB,CAACA,EAAeC,IAC/CC,EAAWlB,GAAc,CAACA,EAAYkB,IAGxC,MAAMC,EAASF,EAAe,EAE9B,IAAIpB,EAAI,EACK,GAAT7L,EACH6L,EAAIF,EAAe7L,KAAKC,IAAIC,GAGxBvC,EAASkF,aACZkJ,EAAI,MAING,GAAcH,EAEdmB,EAAgBA,GAAiB9R,EAAcD,GAAiB+Q,GAAc1T,KAAK0S,OAAS1S,KAAKyS,OAAS,GAE1G,IAAIe,EAAWpG,kBAAuBgE,EAAIuD,GAErCrL,WAAetJ,KAAKsU,aACxBtU,KAAKsU,UAAYd,GAGlB,IAAIC,EAAcrG,kBAAuBiE,EAAIsD,GACzCG,EAAgB9U,KAAKsU,UAErBxE,EAAQtI,KAAKuN,MAAML,EAAelB,EAAWC,GAC7CuB,EAAIxN,KAAKyN,IAAIzN,KAAK0N,GAAK,EAAIpF,GAK/B,GAJS,GAALkF,IACHA,EAAI,MAGU,QAAX1R,EAAmB,CACtB,IACI6R,GADe3B,EAAWC,GAAe,EAAIiB,EACtBrB,EAAetM,EAEtCqO,EAAI5N,KAAKC,IAAIqN,EAAgBA,EAAgB,EAAIK,EAASH,GAE9DR,GAAeM,EAAgBtN,KAAK6N,KAAKD,IAAMJ,EAG9CP,EADGD,EAAc,GACG,EAAIW,EAASX,EAAcM,GAAiBN,EAG7CM,C,MAIpBN,EAAcE,EAAgBrB,EAAetM,EAC7C0N,EAAmBK,EAAgBN,EAAcQ,EAGlD,IAAIM,EAAatV,KAAK6S,WAAa2B,EAAc,EAC7Ce,EAASV,EACTW,EAASxV,KAAK6S,WAEd4C,EAAQZ,EACRa,EAAQF,EAAShB,EAEF,YAAf3R,GACHgD,EAAMF,IAAI,IAAK2P,GACXzP,EAAMI,IAAI,WAAa,GAC1BjG,KAAK4G,SAAShD,KAAK,CAAEiC,MAAOA,EAAOnE,EAAG4T,IAEvClQ,EAAMO,IAAI,SAAU6O,KAGpB3O,EAAMF,IAAI,IAAK2P,GACXzP,EAAMI,IAAI,WAAa,GAC1BjG,KAAK6G,SAASjD,KAAK,CAAEiC,MAAOA,EAAOnE,EAAG4T,KAEtCC,EAAQC,GAAU,CAACA,EAAQD,IAC3BE,EAAOC,GAAS,CAACA,EAAOD,GAEzBrQ,EAAMO,IAAI,QAAS6O,IAGpBpP,EAAM9E,OAAO,CAAEuC,cAAa4Q,YAAagB,EAAkBjB,SAAUsB,EAAerT,EAAG8T,EAAQ7T,EAAG8T,IAClGtD,EAAK5R,OAAO,CAAEuC,cAAapB,EAAGgU,EAAO/T,EAAGgU,EAAOlC,SAAUiB,EAAkBhB,YAAagB,IAExFzU,KAAKsU,UAAYG,EACjBzU,KAAK6S,YAAc2B,EAAcd,CAClC,EApIArP,OAAAC,eAAA+P,EAAA,a,gDAAkC,kBAClChQ,OAAAC,eAAA+P,EAAA,c,gDAA0CzC,EAAarN,WAAWC,OAAO,CAAC6P,EAAc5P,cC5BnF,MAAOkR,UAA+BtB,EAA5CzP,c,oBACCP,OAAAC,eAAA,a,gDAAiB,cAcjBD,OAAAC,eAAA,mB,gDAAuC0L,IAASrP,IAAIX,KAAKC,MAAO,CAAEsB,SAAU,WAAYE,EAAGyB,IAAKxB,EAAGwB,IAAKC,QAASD,IAAKD,QAASC,QAE/HmB,OAAAC,eAAA,uB,gDAA2CtE,KAAKqF,gBAAgBvB,SAASF,KAAKoM,IAASrP,IAAIX,KAAKC,MAAO,CAAEkO,UAAW,CAAC,YAAa,cAAe5M,SAAU,WAAYE,EAAGyB,IAAKxB,EAAGwB,IAAKC,QAASD,IAAKD,QAASC,QAoD/M,CAlDWQ,YACT5D,MAAM4D,YACN1D,KAAK2F,IAAI,WAAY9E,KACrBb,KAAK2F,IAAI,cAAe9E,KACxBb,KAAK2F,IAAI,UAAW,UACpB3F,KAAKqF,gBAAgBM,IAAI,OAAQ3F,KAAK4V,WACvC,CAEUC,eACT,IAAIxQ,EAAkBrF,KAAKqF,gBAEvBgH,EAAIhH,EAAgBiH,aACpBC,EAAIlH,EAAgBmH,cAEpBoJ,EAAa5V,KAAK4V,WAClBE,EAAiB9V,KAAK8V,eACtB5T,EAAQ0T,EAAW3P,IAAI,QAAS,GAEpC,MAAMiF,EAAS0K,EAAWG,cAE1B,IAAIC,EAAK9K,EAAOU,MAAQV,EAAOS,KAC3BsK,EAAK/K,EAAOI,OAASJ,EAAOG,IAE/BnJ,EAD8B,cAA3BlC,KAAKiG,IAAI,eACJoG,EAAI2J,EAGJzJ,EAAI0J,EAET/T,GAASiF,KAAqB+O,KAAThU,IACxB0T,EAAWjQ,IAAI,QAASzD,GACxB0T,EAAWjQ,IAAI,IAAK0G,EAAI,GACxBuJ,EAAWjQ,IAAI,IAAK4G,EAAI,GAExBuJ,EAAenQ,IAAI,QAASzD,GAC5B4T,EAAenQ,IAAI,IAAK0G,EAAI,GAC5ByJ,EAAenQ,IAAI,IAAK4G,EAAI,GAE9B,CAEO7F,mBAEN,GADA5G,MAAM4G,mBACF1G,KAAKyI,QAAQ,WAAY,CAC5B,MAAM0N,EAAUnW,KAAKiG,IAAI,WACzBjG,KAAK4V,WAAWjQ,IAAI,UAAWwQ,GAC/BnW,KAAK8V,eAAenQ,IAAI,UAAWwQ,E,CAGpCnW,KAAK6V,cACN,EAhEAxR,OAAAC,eAAAqR,EAAA,a,gDAAkC,2BAClCtR,OAAAC,eAAAqR,EAAA,c,gDAA0CtB,EAAc9P,WAAWC,OAAO,CAACmR,EAAuBlR,cCjB7F,MAAO2R,UAAoB5S,EACtBE,YACT5D,MAAM4D,YAEN1D,KAAK+D,gBAAgBzD,OAAO,CAAEkB,YAAW,EAAM6U,OAAQrW,KAAKC,MAAMoS,kBACnE,EAEAhO,OAAAC,eAAA8R,EAAA,a,gDAAkC,gBAClC/R,OAAAC,eAAA8R,EAAA,c,gDAA0C5S,EAAae,WAAWC,OAAO,CAAC4R,EAAY3R,a","file":"static/js/16.1460a1da.chunk.js","sourcesContent":["import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/percent\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PercentSeries\").setAll({\r\n\t\t\tlegendLabelText: \"{category}\",\r\n\t\t\tlegendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/pie\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PieChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t})\r\n\r\n\t\tr(\"PieSeries\").setAll({\r\n\t\t\talignLabels: true,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).setAll({\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tisMeasured: false,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\ttoggleKey: \"active\",\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tstrokeOpacity: 1,\r\n\t\t\trole: \"figure\",\r\n\t\t\tlineJoin:\"round\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n\r\n\t\tr(\"RadialLabel\", [\"pie\"]).setAll({\r\n\t\t\ttextType: \"aligned\",\r\n\t\t\tradius: 10,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tpaddingTop: 5,\r\n\t\t\tpaddingBottom: 5,\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pie\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/funnel\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SlicedChart\").setAll({\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Funnel\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"FunnelSeries\").setAll({\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\talignLabels: true,\r\n\t\t\tsequencedInterpolation: true\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0,\r\n\t\t\t//tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 })\r\n\r\n\t\tr(\"Label\", [\"funnel\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\t// Class: Label\r\n\t\tr(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"funnel\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tstrokeOpacity: 0,\r\n\t\t\texpandDistance: -0.1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 10,\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 10\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pyramid\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"PyramidSeries\").setAll({\r\n\t\t\tvalueIs: \"area\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n\r\n\t\tr(\"Label\", [\"pyramid\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pyramid\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pictorial\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\t// Class: FunnelSlice\r\n\t\tr(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pictorial\"]).setAll({\r\n\t\t\tlocation: 0.5\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { PercentSeries } from \"./PercentSeries\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\n/**\n * Base class for [[PieChart]].\n *\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\n *\n * @important\n */\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(PercentDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\t\n\t}\t\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\nimport type { PercentChart } from \"./PercentChart\";\nimport type { PatternSet } from \"../../core/util/PatternSet\";\nimport type { Pattern } from \"../../core/render/patterns/Pattern\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visual element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n\t/**\n\t * Pattern used for the slice and related elements, e.g. legend marker.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n\t * @since 5.10.0\n\t */\n\tfillPattern: Pattern;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A [[PatternSet]] to use when asigning patterns for slices.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Pattern_sets} for more info\n\t * @since 5.10.0\n\t */\n\tpatterns?: PatternSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labels be aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\n\t/**\n\t * Calculate average value in series.\n\t */\n\tvalueAverage?: number;\n\n\t/**\n\t * Count of items in series.\n\t */\n\tvalueCount?: number;\n\n\t/**\n\t * Sum of values in series.\n\t */\n\tvalueSum?: number;\n\n\t/**\n\t * Sum of all absolute values in series.\n\t */\n\tvalueAbsoluteSum?: number;\n\n\t/**\n\t * Lowest value in series.\n\t */\n\tvalueLow?: number;\n\n\t/**\n\t * Highest value in series.\n\t */\n\tvalueHigh?: number;\n\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this.addDisposer(this._makeSlices());\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\tpublic abstract chart: PercentChart | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"fillPattern\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this.addDisposer(this._makeLabels());\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this.addDisposer(this._makeTicks());\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t\tconst patterns = this.get(\"patterns\");\n\t\tif (patterns) {\n\t\t\tpatterns.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = Infinity;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tif (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\t\t\t});\n\t\t}\n\n\t\tthis._arrange();\n\t}\n\n\tprotected _arrange() {\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t}\n\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tthis._arrange();\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\n\t\tif (dataItem.get(\"fillPattern\") == null) {\n\t\t\tlet patterns = this.get(\"patterns\");\n\t\t\tif (patterns) {\n\t\t\t\tdataItem.setRaw(\"fillPattern\", patterns.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tif (slice.get(\"active\")) {\n\t\t\tslice.states.applyAnimate(\"active\");\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tslice.hideTooltip();\n\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic hoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice && !slice.isHidden()) {\n\t\t\tslice.hover();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers un-hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic unhoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tslice.unhover();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (dataItem) {\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\t\tif (legendDataItem) {\n\t\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\t\tif (slice.get(setting) != null) {\n\t\t\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\n}\n","import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirtyKey(\"radius\");\n\t}\t\t\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\n\t/**\n\t * Actual radius of the series in pixels.\n\t */\n\tradius?: number;\n\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart._maxRadius;\n\t\t}\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn -chart._maxRadius;\n\t\t}\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet textType = labelsTemplate.get(\"textType\");\n\t\t\t\t\tif (textType == null || textType == \"aligned\") {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\t//if (radius > 0) {\n\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\n\t\t\t\t\t\tconst fillPattern = dataItem.get(\"fillPattern\");\n\t\t\t\t\t\tslice._setDefault(\"fillPattern\", fillPattern);\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t})\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\t\t\tlet points:Array<IPoint> = [];\n\n\t\t\tif(x != 0 || y != 0){\n\t\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\t\tconst labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\n\t\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t\t}\n\n\t\t\t\tlet dx = -pr;\n\t\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\t\tdx = pl;\n\t\t\t\t}\n\t\t\t\tpoints = [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }];\t\t\t\t\n\t\t\t}\n\n\t\t\ttick.set(\"points\", points);\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\tconst startAngle = slice.get(\"startAngle\", 0);\n\t\t\t\tconst arc = slice.get(\"arc\", 0);\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tconst angle = startAngle + arc * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nexport interface IFunnelSliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Top width in pixels.\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * Bottom width in pixels.\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Orientation.\n\t */\n\torientation?: \"vertical\" | \"horizontal\";\n\n\t/**\n\t * A distance in pixels the slice should \"puff up\".\n\t *\n\t * Any non-zero value will make sides of the slide curved.\n\t */\n\texpandDistance?: number;\n\n}\n\nexport interface IFunnelSlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice for [[FunnelSeries]].\n */\nexport class FunnelSlice extends Graphics {\n\tdeclare public _settings: IFunnelSliceSettings;\n\tdeclare public _privateSettings: IFunnelSlicePrivate;\n\n\tpublic static className: string = \"FunnelSlice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([FunnelSlice.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tprotected _tlx: number = 0;\n\tprotected _tly: number = 0;\n\n\tprotected _trx: number = 0;\n\tprotected _try: number = 0;\n\n\tprotected _blx: number = 0;\n\tprotected _bly: number = 0;\n\n\tprotected _brx: number = 0;\n\tprotected _bry: number = 0;\n\n\tprotected _cprx: number = 0;\n\tprotected _cplx: number = 0;\n\tprotected _cpry: number = 0;\n\tprotected _cply: number = 0;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(this._tlx, this._tly);\n\t\t\tdisplay.lineTo(this._trx, this._try);\n\t\t\tdisplay.quadraticCurveTo(this._cprx, this._cpry, this._brx, this._bry);\n\t\t\tdisplay.lineTo(this._blx, this._bly);\n\t\t\tdisplay.quadraticCurveTo(this._cplx, this._cply, this._tlx, this._tly);\n\t\t})\n\t}\n\n\tpublic getPoint(locationX: number, locationY: number): IPoint {\n\t\tlet w = this.width();\n\t\tlet h = this.height();\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", 0);\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationY;\n\t\t\tlet mrx = trx + (brx - trx) * locationY;\n\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\n\t\t}\n\t\telse {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationX;\n\t\t\tlet mrx = trx + (brx - trx) * locationX;\n\n\t\t\treturn { x: w * locationX, y: mlx + (mrx - mlx) * locationY};\n\t\t}\n\n\t}\n\n\tpublic _changed() {\n\n\t\tif (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tconst w = this.width();\n\t\t\tconst h = this.height();\n\t\t\tconst tw = this.get(\"topWidth\", 0);\n\t\t\tconst bw = this.get(\"bottomWidth\", 0);\n\t\t\tthis._clear = true;\n\n\t\t\tlet ed = this.get(\"expandDistance\", 0);\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tthis._tlx = -tw / 2;\n\t\t\t\tthis._tly = 0;\n\n\t\t\t\tthis._trx = tw / 2;\n\t\t\t\tthis._try = 0;\n\n\t\t\t\tthis._brx = bw / 2;\n\t\t\t\tthis._bry = h;\n\n\t\t\t\tthis._blx = -bw / 2;\n\t\t\t\tthis._bly = h;\n\n\t\t\t\tthis._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\n\t\t\t\tthis._cpry = this._try + 0.5 * h;\n\n\t\t\t\tthis._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\n\t\t\t\tthis._cply = this._tly + 0.5 * h;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._tly = -tw / 2;\n\t\t\t\tthis._tlx = 0;\n\n\t\t\t\tthis._try = tw / 2;\n\t\t\t\tthis._trx = 0;\n\n\t\t\t\tthis._bry = bw / 2;\n\t\t\t\tthis._brx = w;\n\n\t\t\t\tthis._bly = -bw / 2;\n\t\t\t\tthis._blx = w;\n\n\t\t\t\tthis._cpry = this._try + (this._bry - this._try) / 2 + ed * w,\n\t\t\t\tthis._cprx = this._trx + 0.5 * w;\n\n\t\t\t\tthis._cply = this._tly + (this._bly - this._tly) / 2 - ed * w;\n\t\t\t\tthis._cplx = this._tlx + 0.5 * w;\n\t\t\t}\n\t\t}\n\t\tsuper._changed();\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { SlicedChart } from \"./SlicedChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { FunnelSlice } from \"./FunnelSlice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { Label } from \"../../core/render/Label\";\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IFunnelSeriesDataItem extends IPercentSeriesDataItem {\n\n\t/**\n\t * A related slice element.\n\t */\n\tslice: FunnelSlice;\n\n\t/**\n\t * A related slice link element\n\t */\n\tlink: FunnelSlice;\n\n\t/**\n\t * Data item's index.\n\t */\n\tindex: number;\n\n}\n\nexport interface IFunnelSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Width of the bottom edge of the slice relative to the top edge of the next\n\t * slice.\n\t *\n\t * `1` - means the full width of the slice, resulting in a rectangle.\n\t * `0` - means using width of the next slice, resulting in a trapezoid.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_bottom_width} for more info\n\t * @default 1\n\t */\n\tbottomRatio?: number;\n\n\t/**\n\t * Orientation of the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/#Series_orientation} for more info\n\t * @default \"vertical\"\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n\t/**\n\t * If set to `true`, series will not create slices for data items with zero\n\t * value.\n\t */\n\tignoreZeroValues?: boolean;\n\n\t/**\n\t * Should labels be aligned into columns/rows?\n\t *\n\t * @default false\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tendLocation?: number;\n\n}\n\nexport interface IFunnelSeriesPrivate extends IPercentSeriesPrivate {\n}\n\n/**\n * Creates a funnel series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\n * @important\n */\nexport class FunnelSeries extends PercentSeries {\n\n\t/**\n\t * A chart series is attached to.\n\t */\n\tdeclare public chart: SlicedChart | undefined;\n\n\tprotected _tag = \"funnel\";\n\n\tdeclare public _sliceType: FunnelSlice;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\n\t\t\t}, [this.slices.template])\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Label._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\n\t\t\t}, [this.labels.template])\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\n\t\t\t}, [this.ticks.template])\n\t\t);\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice links in series.\n\t *\n\t * `links.template` can also be used to configure slice links.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\n\t */\n\tpublic readonly links: ListTemplate<this[\"_sliceType\"]> = this.addDisposer(this._makeLinks());\n\n\tprotected _makeLinks(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\n\t\t\t}, [this.links.template]),\n\t\t);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLink(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst link = this.slicesContainer.children.push(this.links.make());\n\t\tlink._setDataItem(dataItem);\n\t\tdataItem.set(\"link\", link);\n\t\tthis.links.push(link);\n\t\treturn link;\n\t}\n\n\tpublic static className: string = \"FunnelSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([FunnelSeries.className]);\n\n\tdeclare public _settings: IFunnelSeriesSettings;\n\tdeclare public _privateSettings: IFunnelSeriesPrivate;\n\tdeclare public _dataItemSettings: IFunnelSeriesDataItem;\n\n\tprotected _total: number = 0;\n\tprotected _count: number = 0;\n\tprotected _nextCoord: number = 0;\n\n\tprotected _opposite: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tconst slicesContainer = this.slicesContainer;\n\t\tslicesContainer.setAll({ isMeasured: true, position: \"relative\", width: percent(100), height: percent(100) });\n\t\tslicesContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tslicesContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t}\n\t\telse {\n\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice._setDataItem(dataItem);\n\n\t\tdataItem.set(\"slice\", slice);\n\n\t\tthis.makeLink(dataItem);\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.on(\"x\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tlabel.on(\"y\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\n\t\tslice.events.on(\"boundschanged\", () => {\n\t\t\tconst dataItem = slice.dataItem;\n\t\t\tif (dataItem) {\n\t\t\t\tthis._updateTick(dataItem as any);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tpublic _updateChildren() {\n\t\tthis._opposite = false;\n\t\tif (this.children.indexOf(this.labelsContainer) == 0) {\n\t\t\tthis._opposite = true;\n\t\t}\n\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tconst value = dataItem.get(\"value\");\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tcount++;\n\t\t\t\tif (value > 0) {\n\t\t\t\t\ttotal += Math.abs(dataItem.get(\"valueWorking\", value) / value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.get(\"ignoreZeroValues\", false)) {\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis._total = 1 / count * total;\n\t\tthis._count = count;\n\n\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\tthis._fixLayout();\n\t\t}\n\n\t\tif (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\n\n\t\t\tconst slicesContainer = this.slicesContainer;\n\n\t\t\tlet h: number;\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\th = slicesContainer.innerHeight();\n\t\t\t}\n\t\t\telse {\n\t\t\t\th = slicesContainer.innerWidth();\n\t\t\t}\n\n\t\t\tthis._nextCoord = this.get(\"startLocation\", 0) * h;\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet i = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\tdataItem.set(\"index\", i);\n\t\t\t\ti++;\n\n\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tconst link = dataItem.get(\"link\");\n\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\tconst fillPattern = dataItem.get(\"fillPattern\");\n\n\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\tslice._setDefault(\"fillPattern\", fillPattern);\n\t\t\t\tlink._setDefault(\"fill\", color);\n\t\t\t\tlink._setDefault(\"stroke\", color);\n\n\t\t\t\tconst value = dataItem.get(\"value\");\n\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\tif (value == 0 && this.get(\"ignoreZeroValues\")) {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", false);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", false);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", true);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", true);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", true);\n\n\t\t\t\t\t\tthis.decorateSlice(dataItem);\n\n\t\t\t\t\t\tif (this.isLast(dataItem)) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!dataItem.isHidden()) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _fixLayout() {\n\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst labelsContainer = this.labelsContainer;\n\t\tconst labelsTemplate = this.labels.template;\n\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tlabelsContainer.set(\"position\", \"relative\");\n\t\t\tlabelsContainer.setAll({ isMeasured: true });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: p100, x: p100 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: 0, x: 0 });\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlabelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tlabelsContainer.setAll({ x: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, x: 0 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabelsContainer.setAll({ y: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, y: 0 });\n\t\t\t}\n\t\t}\n\t\tthis.markDirtySize();\n\t}\n\n\tprotected getNextValue(dataItem: DataItem<this[\"_dataItemSettings\"]>): number {\n\t\tlet index = dataItem.get(\"index\");\n\t\tlet nextValue = dataItem.get(\"valueWorking\", 0);\n\t\tif (index < this.dataItems.length - 1) {\n\t\t\tlet nextItem = this.dataItems[index + 1];\n\t\t\tnextValue = nextItem.get(\"valueWorking\", 0);\n\n\t\t\tif (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\n\t\t\t\treturn this.getNextValue(nextItem);\n\t\t\t}\n\t\t}\n\t\treturn nextValue;\n\t}\n\n\tprotected isLast(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tlet index = dataItem.get(\"index\");\n\t\tif (index == this.dataItems.length - 1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tfor (let i = index + 1; i < this.dataItems.length; i++) {\n\t\t\t\tif (!this.dataItems[i].isHidden()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tlet maxWidth = slicesContainer.innerWidth();\n\t\tlet maxHeight = slicesContainer.innerHeight();\n\n\t\tlet maxSize = maxWidth;\n\t\tif (orientation == \"horizontal\") {\n\t\t\tmaxSize = maxHeight;\n\t\t}\n\n\t\tconst nextValue = this.getNextValue(dataItem);\n\t\tconst value = dataItem.get(\"value\", 0);\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\n\t\tconst bottomRatio = this.get(\"bottomRatio\", 0);\n\t\tconst valueHigh = this.getPrivate(\"valueHigh\", 0);\n\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tif (this._nextCoord == Infinity) {\n\t\t\tthis._nextCoord = 0;\n\t\t}\n\n\t\tlet topWidth = workingValue / valueHigh * maxSize;\n\t\tlet bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\n\n\t\tslice.setAll({ topWidth, bottomWidth, orientation });\n\t\tlink.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tif (orientation == \"vertical\") {\n\n\t\t\tlet linkHeight = link.height() * d;\n\n\t\t\tmaxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"y\", this._nextCoord);\n\n\t\t\tlet height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ height, x: maxWidth / 2 });\n\t\t\tlet labelY = this._nextCoord + height / 2;\n\t\t\tlabel.set(\"y\", labelY);\n\n\t\t\tthis._nextCoord += height + linkHeight;\n\t\t\tlink.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\n\t\t}\n\t\telse {\n\t\t\tlet linkHeight = link.width() * d;\n\n\t\t\tmaxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"x\", this._nextCoord);\n\n\t\t\tlet width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ width, y: maxHeight / 2 });\n\t\t\tconst labelX = this._nextCoord + width / 2;\n\t\t\tlabel.set(\"x\", labelX);\n\n\t\t\tthis._nextCoord += width + linkHeight;\n\t\t\tlink.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\n\t\t}\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").hide(duration);\n\t\treturn super.hideDataItem(dataItem, duration)\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").show(duration);\n\t\treturn super.showDataItem(dataItem, duration)\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\tconst label = dataItem.get(\"label\");\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (tick && slice && label) {\n\n\t\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\t\tconst slicesContainer = this.slicesContainer;\n\t\t\t\tlet tickLocation = tick.get(\"location\", 0.5);\n\n\t\t\t\tconst lcw = labelsContainer.width();\n\t\t\t\tconst lch = labelsContainer.height();\n\n\t\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\tconst pt = labelsContainer.get(\"paddingTop\", 0);\n\t\t\t\tconst pb = labelsContainer.get(\"paddingBottom\", 0);\n\n\t\t\t\tlet p0 = { x: 0, y: 0 };\n\t\t\t\tlet p1 = { x: 0, y: 0 };\n\t\t\t\tlet p2 = { x: 0, y: 0 };\n\n\t\t\t\tif (this._opposite) {\n\t\t\t\t\ttickLocation = 1 - tickLocation;\n\t\t\t\t}\n\n\t\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\t\tp0 = slice.getPoint(tickLocation, 0.5);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.x = lcw;\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = lcw - pl;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.x = slicesContainer.x() + slicesContainer.width();\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = p1.x + lcw - label.width() - pr;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp0 = slice.getPoint(0.5, tickLocation);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.y = lch;\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = lch - pt;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.y = slicesContainer.y() + slicesContainer.height();\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = p1.y + lch - label.height() - pb;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"points\", [p0, p1, p2]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet link = dataItem.get(\"link\");\n\t\tif (link) {\n\t\t\tthis.links.removeValue(link);\n\t\t\tlink.dispose();\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst width = slice.width();\n\t\t\t\tconst height = slice.height();\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tlet dx = 0;\n\t\t\t\tlet dy = 0;\n\t\t\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\t\t\tdy = height / 2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdx = width / 2\n\t\t\t\t}\n\n\t\t\t\tsprite.setAll({ x: slice.x() + width * locationX - dx, y: slice.y() - dy + height * locationY });\n\t\t\t}\n\t\t}\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport { FunnelSeries, IFunnelSeriesSettings, IFunnelSeriesDataItem, IFunnelSeriesPrivate } from \"./FunnelSeries\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPyramidSeriesDataItem extends IFunnelSeriesDataItem {\n\n}\n\nexport interface IPyramidSeriesSettings extends IFunnelSeriesSettings {\n\n\t/**\n\t * The width of the tip of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\ttopWidth?: number | Percent;\n\n\t/**\n\t * The width of the base of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\tbottomWidth?: number | Percent;\n\n\t/**\n\t * Determines calculation mechanism for the slice area based on value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Slice_size} for more info\n\t * @default \"area\"\n\t */\n\tvalueIs?: \"area\" | \"height\";\n\n}\n\nexport interface IPyramidSeriesPrivate extends IFunnelSeriesPrivate {\n}\n\n/**\n * Creates a pyramid series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\n * @important\n */\nexport class PyramidSeries extends FunnelSeries {\n\tprotected _tag = \"pyramid\";\n\n\tpublic static className: string = \"PyramidSeries\";\n\tpublic static classNames: Array<string> = FunnelSeries.classNames.concat([PyramidSeries.className]);\n\n\tdeclare public _settings: IPyramidSeriesSettings;\n\tdeclare public _privateSettings: IPyramidSeriesPrivate;\n\tdeclare public _dataItemSettings: IPyramidSeriesDataItem;\n\n\tprotected _nextSize: number | undefined;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._nextSize = undefined;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\t\tconst valueIs = this.get(\"valueIs\", \"area\");\n\n\t\tconst sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n\t\tif (sum == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", p100);\n\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n\t\tconst value = dataItem.get(\"value\", 0);\n\n\t\tlet sliceHeight: number;\n\t\tlet sliceBottomWidth: number;\n\n\t\tlet pyramidHeight = slicesContainer.innerHeight();\n\t\tlet pyramidWidth = slicesContainer.innerWidth();\n\t\tlet linkWidth = link.width();\n\t\tlet linkHeight = link.height();\n\n\t\tif (orientation == \"horizontal\") {\n\t\t\t[pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\n\t\t\t[linkWidth, linkHeight] = [linkHeight, linkWidth];\n\t\t}\n\n\t\tconst center = pyramidWidth / 2;\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tlinkHeight *= d;\n\n\t\tpyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n\n\t\tlet topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n\t\tif (!$type.isNumber(this._nextSize)) {\n\t\t\tthis._nextSize = topWidth;\n\t\t}\n\n\t\tlet bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n\t\tlet sliceTopWidth = this._nextSize;\n\n\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n\t\tlet c = Math.tan(Math.PI / 2 - angle);\n\t\tif (c == 0) {\n\t\t\tc = 0.00000001;\n\t\t}\n\n\t\tif (valueIs == \"area\") {\n\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n\t\t\tlet square = totalSquare * workingValue / sum;\n\n\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n\n\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n\t\t\tif (sliceHeight > 0) {\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsliceBottomWidth = sliceTopWidth;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\n\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\n\t\t}\n\n\t\tlet labelCoord = this._nextCoord + sliceHeight / 2;\n\t\tlet sliceX = center;\n\t\tlet sliceY = this._nextCoord;\n\n\t\tlet linkX = center;\n\t\tlet linkY = sliceY + sliceHeight;\n\n\t\tif (orientation == \"vertical\") {\n\t\t\tlabel.set(\"y\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._rLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\tslice.set(\"height\", sliceHeight);\n\t\t}\n\t\telse {\n\t\t\tlabel.set(\"x\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._hLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\t[sliceX, sliceY] = [sliceY, sliceX];\n\t\t\t[linkX, linkY] = [linkY, linkX];\n\n\t\t\tslice.set(\"width\", sliceHeight);\n\t\t}\n\n\t\tslice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\n\t\tlink.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\n\n\t\tthis._nextSize = sliceBottomWidth;\n\t\tthis._nextCoord += sliceHeight + linkHeight;\n\t}\n}\n","import { PyramidSeries, IPyramidSeriesSettings, IPyramidSeriesDataItem, IPyramidSeriesPrivate } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\"\n\n\nexport interface IPictorialStackedSeriesDataItem extends IPyramidSeriesDataItem {\n\n}\n\nexport interface IPictorialStackedSeriesSettings extends IPyramidSeriesSettings {\n\n\t/**\n\t * An SVG path that will define the shape of the pictorial series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/#Shape_of_the_series} for more info\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPictorialStackedSeriesPrivate extends IPyramidSeriesPrivate {\n}\n\n/**\n * Creates a pictorial series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\n * @important\n */\nexport class PictorialStackedSeries extends PyramidSeries {\n\tprotected _tag = \"pictorial\";\n\n\tpublic static className: string = \"PictorialStackedSeries\";\n\tpublic static classNames: Array<string> = PyramidSeries.classNames.concat([PictorialStackedSeries.className]);\n\n\tdeclare public _settings: IPictorialStackedSeriesSettings;\n\tdeclare public _privateSettings: IPictorialStackedSeriesPrivate;\n\tdeclare public _dataItemSettings: IPictorialStackedSeriesDataItem;\n\n\t/**\n\t * A [[Graphics]] element to used as a mask (shape) for the series.\n\t *\n\t * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\n\t */\n\tpublic readonly seriesMask: Graphics = Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 });\n\n\tpublic readonly seriesGraphics: Graphics = this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }));\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"topWidth\", p100);\n\t\tthis.set(\"bottomWidth\", p100);\n\t\tthis.set(\"valueIs\", \"height\");\n\t\tthis.slicesContainer.set(\"mask\", this.seriesMask);\n\t}\n\n\tprotected _updateScale() {\n\t\tlet slicesContainer = this.slicesContainer;\n\n\t\tlet w = slicesContainer.innerWidth();\n\t\tlet h = slicesContainer.innerHeight();\n\n\t\tlet seriesMask = this.seriesMask;\n\t\tlet seriesGraphics = this.seriesGraphics;\n\t\tlet scale = seriesMask.get(\"scale\", 1);\n\n\t\tconst bounds = seriesMask.localBounds();\n\n\t\tlet mw = bounds.right - bounds.left;\n\t\tlet mh = bounds.bottom - bounds.top;\n\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\tscale = w / mw;\n\t\t}\n\t\telse {\n\t\t\tscale = h / mh;\n\t\t}\n\t\tif (scale != Infinity && scale != NaN) {\n\t\t\tseriesMask.set(\"scale\", scale);\n\t\t\tseriesMask.set(\"x\", w / 2);\n\t\t\tseriesMask.set(\"y\", h / 2);\n\n\t\t\tseriesGraphics.set(\"scale\", scale);\n\t\t\tseriesGraphics.set(\"x\", w / 2);\n\t\t\tseriesGraphics.set(\"y\", h / 2);\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tthis.seriesMask.set(\"svgPath\", svgPath);\n\t\t\tthis.seriesGraphics.set(\"svgPath\", svgPath);\n\t\t}\n\n\t\tthis._updateScale();\n\t}\n\n}\n","import { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport type { PercentSeries } from \"../percent/PercentSeries\";\n\n\nexport interface ISlicedChartSettings extends IPercentChartSettings {\n}\n\nexport interface ISlicedChartPrivate extends IPercentChartPrivate {\n}\n\n/**\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class SlicedChart extends PercentChart {\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.seriesContainer.setAll({ isMeasured:true, layout: this._root.horizontalLayout });\n\t}\n\n\tpublic static className: string = \"SlicedChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([SlicedChart.className]);\n\n\tdeclare public _settings: ISlicedChartSettings;\n\tdeclare public _privateSettings: ISlicedChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n}\n"],"sourceRoot":""}