{"version":3,"sources":["../../../../../src/.internal/plugins/json/Serializer.ts","../../../../src/plugins/json.ts"],"names":["Serializer","Entity","constructor","Object","defineProperty","serialize","source","depth","arguments","length","undefined","full","this","get","$type","res","$array","arrval","push","ListData","values","am5object","Template","Color","Percent","fullSettings","type","className","settings","$object","_settings","includeSettings","excludeSettings","filter","value","indexOf","isUserSetting","setting","settingValue","Component","data","properties","toCSSHex","percent","excludeProperties","key","_refs","refs","classNames","concat"],"mappings":"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","file":"static/js/json_plugins_json.3133ca90.chunk.js","sourcesContent":["import { Entity, IEntityEvents, IEntitySettings, IEntityPrivate } from \"../../core/util/Entity\";\nimport { Component } from \"../../core/render/Component\";\nimport { Color } from \"../../core/util/Color\";\nimport { Percent } from \"../../core/util/Percent\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListData } from \"../../core/util/Data\";\n\nimport * as $type from \"../../core/util/Type\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $object from \"../../core/util/Object\";\n\n\nexport interface ISerializerSettings extends IEntitySettings {\n\n\t/**\n\t * An array of settings to not include in the serialized data.\n\t */\n\texcludeSettings?: Array<string>;\n\n\t/**\n\t * An array of settings to include in the serialized data.\n\t */\n\tincludeSettings?: Array<string>;\n\n\t/**\n\t * Include full values of these settings.\n\t *\n\t * @since 6.4.3\n\t */\n\tfullSettings?: Array<string>;\n\n\t/**\n\t * An array of properties to not include in the serialized data.\n\t *\n\t * @since 5.3.2\n\t */\n\texcludeProperties?: Array<string>;\n\n\t/**\n\t * An array of properties to include in the serialized data.\n\t *\n\t * @ignore\n\t * @todo implement\n\t */\n\tincludeProperties?: Array<string>;\n\n\t/**\n\t * Maximum depth of recursion when traversing target object.\n\t *\n\t * @default 2\n\t */\n\tmaxDepth?: number;\n\n}\n\nexport interface ISerializerPrivate extends IEntityPrivate {\n}\n\nexport interface ISerializerEvents extends IEntityEvents {\n}\n\n\n/**\n * Provides functionality to serialize charts or individual elements into simple\n * objects or JSON.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/serializing/} for more info\n * @since 5.3.0\n */\nexport class Serializer extends Entity {\n\n\tpublic static className: string = \"Serializer\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Serializer.className]);\n\n\tdeclare public _settings: ISerializerSettings;\n\tdeclare public _privateSettings: ISerializerPrivate;\n\tdeclare public _events: ISerializerEvents;\n\n\tprotected _refs: { [index: string]: any } = {};\n\n\t/**\n\t * Serializes target object into a simple object or JSON string.\n\t *\n\t * @param   source  Target object\n\t * @param   depth   Current depth\n\t * @param   full    Serialize object in full (ignoring maxDepth)\n\t * @return          Serialized data\n\t */\n\tpublic serialize(source: unknown, depth: number = 0, full: boolean = false): unknown {\n\t\tif (depth > this.get(\"maxDepth\", 2)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (source === false || source === true) {\n\t\t\treturn source;\n\t\t}\n\n\t\tif ($type.isArray(source)) {\n\t\t\tconst res: any[] = [];\n\t\t\t$array.each(source, (arrval) => {\n\t\t\t\tres.push(this.serialize(arrval, depth, full));\n\t\t\t});\n\t\t\treturn res;\n\t\t}\n\t\telse if (source instanceof ListData) {\n\t\t\tconst res: any[] = [];\n\t\t\t$array.each(source.values, (arrval) => {\n\t\t\t\tres.push(this.serialize(arrval, depth, full));\n\t\t\t});\n\t\t\treturn res;\n\t\t}\n\t\tconst res: any = {};\n\n\t\tconst am5object = source instanceof Entity || source instanceof Template || source instanceof Color || source instanceof Percent ? true : false;\n\n\t\t// Process settings\n\t\tconst fullSettings: any = this.get(\"fullSettings\", []);\n\t\tif (source instanceof Entity) {\n\t\t\tres.type = source.className;\n\n\t\t\tlet settings: Array<string> = $object.keys(source._settings);\n\t\t\tconst includeSettings: Array<string> = this.get(\"includeSettings\", []);\n\t\t\tconst excludeSettings: Array<string> = this.get(\"excludeSettings\", []);\n\t\t\tif (includeSettings.length) {\n\t\t\t\tsettings = includeSettings;\n\t\t\t}\n\t\t\telse if (excludeSettings.length) {\n\t\t\t\tsettings = settings.filter((value) => {\n\t\t\t\t\treturn excludeSettings.indexOf(value) === -1;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Include only user settings\n\t\t\tsettings = settings.filter((value) => {\n\t\t\t\treturn source.isUserSetting(value as any);\n\t\t\t});\n\n\t\t\tif (settings.length) {\n\t\t\t\tres.settings = {};\n\t\t\t\t$array.each(settings, (setting) => {\n\t\t\t\t\tconst settingValue = (<any>source).get(setting);\n\t\t\t\t\tif (settingValue !== undefined) {\n\t\t\t\t\t\tres.settings[setting] = this.serialize(settingValue, depth + 1, full || fullSettings.indexOf(setting) !== -1);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse if (source instanceof Template) {\n\t\t\tres.type = \"Template\";\n\t\t\tlet settings: Array<string> = $object.keys(source._settings);\n\t\t\tif (settings.length) {\n\t\t\t\tres.settings = {};\n\t\t\t\t$array.each(settings, (setting) => {\n\t\t\t\t\tres.settings[setting] = this.serialize((<any>source).get(setting), depth + 1, fullSettings.indexOf(setting) !== -1);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\n\t\t// Data\n\t\tif (source instanceof Component) {\n\t\t\tif (source.data.length) {\n\t\t\t\tres.properties = {\n\t\t\t\t\tdata: this.serialize(source.data.values, 1, true)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Process the rest\n\t\tif (source instanceof Color) {\n\t\t\treturn {\n\t\t\t\ttype: \"Color\",\n\t\t\t\tvalue: source.toCSSHex()\n\t\t\t};\n\t\t}\n\t\telse if (source instanceof Percent) {\n\t\t\treturn {\n\t\t\t\ttype: \"Percent\",\n\t\t\t\tvalue: source.percent\n\t\t\t};\n\t\t}\n\t\telse if ($type.isString(source) || $type.isNumber(source)) {\n\t\t\treturn source;\n\t\t}\n\t\telse if ($type.isObject(source)) {\n\t\t\t// TODO\n\t\t\tif (full && !am5object) {\n\t\t\t\tconst excludeProperties: Array<string> = this.get(\"excludeProperties\", []);\n\t\t\t\t$object.each(source, (key, value) => {\n\t\t\t\t\tif (excludeProperties.indexOf(key) === -1 && value !== undefined) {\n\t\t\t\t\t\tres[key] = this.serialize(value, depth + 1, full);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (depth == 0 && $object.keys(this._refs).length) {\n\t\t\tres.refs = this._refs;\n\t\t}\n\n\t\treturn res;\n\t}\n}","export { JsonParser } from \"../.internal/plugins/json/Json\";\nexport { Serializer } from \"../.internal/plugins/json/Serializer\";\n"],"sourceRoot":""}